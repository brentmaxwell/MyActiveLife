/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing Route
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class RouteTests
    {
        // TODO uncomment below to declare an instance variable for Route
        //private Route instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Route
            //instance = new Route();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Route
        /// </summary>
        [Test]
        public void RouteInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Route
            //Assert.IsInstanceOfType<Route> (instance, "variable 'instance' is a Route");
        }


        /// <summary>
        /// Test the property 'Athlete'
        /// </summary>
        [Test]
        public void AthleteTest()
        {
            // TODO unit test for the property 'Athlete'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Test]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'Distance'
        /// </summary>
        [Test]
        public void DistanceTest()
        {
            // TODO unit test for the property 'Distance'
        }
        /// <summary>
        /// Test the property 'ElevationGain'
        /// </summary>
        [Test]
        public void ElevationGainTest()
        {
            // TODO unit test for the property 'ElevationGain'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Test]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'IdStr'
        /// </summary>
        [Test]
        public void IdStrTest()
        {
            // TODO unit test for the property 'IdStr'
        }
        /// <summary>
        /// Test the property 'Map'
        /// </summary>
        [Test]
        public void MapTest()
        {
            // TODO unit test for the property 'Map'
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Test]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property '_Private'
        /// </summary>
        [Test]
        public void _PrivateTest()
        {
            // TODO unit test for the property '_Private'
        }
        /// <summary>
        /// Test the property 'Starred'
        /// </summary>
        [Test]
        public void StarredTest()
        {
            // TODO unit test for the property 'Starred'
        }
        /// <summary>
        /// Test the property 'Timestamp'
        /// </summary>
        [Test]
        public void TimestampTest()
        {
            // TODO unit test for the property 'Timestamp'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'SubType'
        /// </summary>
        [Test]
        public void SubTypeTest()
        {
            // TODO unit test for the property 'SubType'
        }
        /// <summary>
        /// Test the property 'CreatedAt'
        /// </summary>
        [Test]
        public void CreatedAtTest()
        {
            // TODO unit test for the property 'CreatedAt'
        }
        /// <summary>
        /// Test the property 'UpdatedAt'
        /// </summary>
        [Test]
        public void UpdatedAtTest()
        {
            // TODO unit test for the property 'UpdatedAt'
        }
        /// <summary>
        /// Test the property 'EstimatedMovingTime'
        /// </summary>
        [Test]
        public void EstimatedMovingTimeTest()
        {
            // TODO unit test for the property 'EstimatedMovingTime'
        }
        /// <summary>
        /// Test the property 'Segments'
        /// </summary>
        [Test]
        public void SegmentsTest()
        {
            // TODO unit test for the property 'Segments'
        }

    }

}
