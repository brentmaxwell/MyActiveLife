/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SummaryClub
    /// </summary>
    [DataContract]
        public partial class SummaryClub : MetaClub,  IEquatable<SummaryClub>, IValidatableObject
    {
        /// <summary>
        /// Deprecated. Prefer to use activity_types.
        /// </summary>
        /// <value>Deprecated. Prefer to use activity_types.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SportTypeEnum
        {
            /// <summary>
            /// Enum Cycling for value: cycling
            /// </summary>
            [EnumMember(Value = "cycling")]
            Cycling = 1,
            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            [EnumMember(Value = "running")]
            Running = 2,
            /// <summary>
            /// Enum Triathlon for value: triathlon
            /// </summary>
            [EnumMember(Value = "triathlon")]
            Triathlon = 3,
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 4        }
        /// <summary>
        /// Deprecated. Prefer to use activity_types.
        /// </summary>
        /// <value>Deprecated. Prefer to use activity_types.</value>
        [DataMember(Name="sport_type", EmitDefaultValue=false)]
        public SportTypeEnum? SportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryClub" /> class.
        /// </summary>
        /// <param name="profileMedium">URL to a 60x60 pixel profile picture..</param>
        /// <param name="coverPhoto">URL to a ~1185x580 pixel cover photo..</param>
        /// <param name="coverPhotoSmall">URL to a ~360x176  pixel cover photo..</param>
        /// <param name="sportType">Deprecated. Prefer to use activity_types..</param>
        /// <param name="activityTypes">The activity types that count for a club. This takes precedence over sport_type..</param>
        /// <param name="city">The club&#x27;s city..</param>
        /// <param name="state">The club&#x27;s state or geographical region..</param>
        /// <param name="country">The club&#x27;s country..</param>
        /// <param name="_private">Whether the club is private..</param>
        /// <param name="memberCount">The club&#x27;s member count..</param>
        /// <param name="featured">Whether the club is featured or not..</param>
        /// <param name="verified">Whether the club is verified or not..</param>
        /// <param name="url">The club&#x27;s vanity URL..</param>
        public SummaryClub(string profileMedium = default(string), string coverPhoto = default(string), string coverPhotoSmall = default(string), SportTypeEnum? sportType = default(SportTypeEnum?), List<ActivityType> activityTypes = default(List<ActivityType>), string city = default(string), string state = default(string), string country = default(string), bool? _private = default(bool?), int? memberCount = default(int?), bool? featured = default(bool?), bool? verified = default(bool?), string url = default(string), long? id = default(long?), int? resourceState = default(int?), string name = default(string)) : base(id, resourceState, name)
        {
            this.ProfileMedium = profileMedium;
            this.CoverPhoto = coverPhoto;
            this.CoverPhotoSmall = coverPhotoSmall;
            this.SportType = sportType;
            this.ActivityTypes = activityTypes;
            this.City = city;
            this.State = state;
            this.Country = country;
            this._Private = _private;
            this.MemberCount = memberCount;
            this.Featured = featured;
            this.Verified = verified;
            this.Url = url;
        }
        
        /// <summary>
        /// URL to a 60x60 pixel profile picture.
        /// </summary>
        /// <value>URL to a 60x60 pixel profile picture.</value>
        [DataMember(Name="profile_medium", EmitDefaultValue=false)]
        public string ProfileMedium { get; set; }

        /// <summary>
        /// URL to a ~1185x580 pixel cover photo.
        /// </summary>
        /// <value>URL to a ~1185x580 pixel cover photo.</value>
        [DataMember(Name="cover_photo", EmitDefaultValue=false)]
        public string CoverPhoto { get; set; }

        /// <summary>
        /// URL to a ~360x176  pixel cover photo.
        /// </summary>
        /// <value>URL to a ~360x176  pixel cover photo.</value>
        [DataMember(Name="cover_photo_small", EmitDefaultValue=false)]
        public string CoverPhotoSmall { get; set; }


        /// <summary>
        /// The activity types that count for a club. This takes precedence over sport_type.
        /// </summary>
        /// <value>The activity types that count for a club. This takes precedence over sport_type.</value>
        [DataMember(Name="activity_types", EmitDefaultValue=false)]
        public List<ActivityType> ActivityTypes { get; set; }

        /// <summary>
        /// The club&#x27;s city.
        /// </summary>
        /// <value>The club&#x27;s city.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The club&#x27;s state or geographical region.
        /// </summary>
        /// <value>The club&#x27;s state or geographical region.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The club&#x27;s country.
        /// </summary>
        /// <value>The club&#x27;s country.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Whether the club is private.
        /// </summary>
        /// <value>Whether the club is private.</value>
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool? _Private { get; set; }

        /// <summary>
        /// The club&#x27;s member count.
        /// </summary>
        /// <value>The club&#x27;s member count.</value>
        [DataMember(Name="member_count", EmitDefaultValue=false)]
        public int? MemberCount { get; set; }

        /// <summary>
        /// Whether the club is featured or not.
        /// </summary>
        /// <value>Whether the club is featured or not.</value>
        [DataMember(Name="featured", EmitDefaultValue=false)]
        public bool? Featured { get; set; }

        /// <summary>
        /// Whether the club is verified or not.
        /// </summary>
        /// <value>Whether the club is verified or not.</value>
        [DataMember(Name="verified", EmitDefaultValue=false)]
        public bool? Verified { get; set; }

        /// <summary>
        /// The club&#x27;s vanity URL.
        /// </summary>
        /// <value>The club&#x27;s vanity URL.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryClub {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ProfileMedium: ").Append(ProfileMedium).Append("\n");
            sb.Append("  CoverPhoto: ").Append(CoverPhoto).Append("\n");
            sb.Append("  CoverPhotoSmall: ").Append(CoverPhotoSmall).Append("\n");
            sb.Append("  SportType: ").Append(SportType).Append("\n");
            sb.Append("  ActivityTypes: ").Append(ActivityTypes).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  _Private: ").Append(_Private).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  Featured: ").Append(Featured).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryClub);
        }

        /// <summary>
        /// Returns true if SummaryClub instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryClub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryClub input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ProfileMedium == input.ProfileMedium ||
                    (this.ProfileMedium != null &&
                    this.ProfileMedium.Equals(input.ProfileMedium))
                ) && base.Equals(input) && 
                (
                    this.CoverPhoto == input.CoverPhoto ||
                    (this.CoverPhoto != null &&
                    this.CoverPhoto.Equals(input.CoverPhoto))
                ) && base.Equals(input) && 
                (
                    this.CoverPhotoSmall == input.CoverPhotoSmall ||
                    (this.CoverPhotoSmall != null &&
                    this.CoverPhotoSmall.Equals(input.CoverPhotoSmall))
                ) && base.Equals(input) && 
                (
                    this.SportType == input.SportType ||
                    (this.SportType != null &&
                    this.SportType.Equals(input.SportType))
                ) && base.Equals(input) && 
                (
                    this.ActivityTypes == input.ActivityTypes ||
                    this.ActivityTypes != null &&
                    input.ActivityTypes != null &&
                    this.ActivityTypes.SequenceEqual(input.ActivityTypes)
                ) && base.Equals(input) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && base.Equals(input) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && base.Equals(input) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && base.Equals(input) && 
                (
                    this._Private == input._Private ||
                    (this._Private != null &&
                    this._Private.Equals(input._Private))
                ) && base.Equals(input) && 
                (
                    this.MemberCount == input.MemberCount ||
                    (this.MemberCount != null &&
                    this.MemberCount.Equals(input.MemberCount))
                ) && base.Equals(input) && 
                (
                    this.Featured == input.Featured ||
                    (this.Featured != null &&
                    this.Featured.Equals(input.Featured))
                ) && base.Equals(input) && 
                (
                    this.Verified == input.Verified ||
                    (this.Verified != null &&
                    this.Verified.Equals(input.Verified))
                ) && base.Equals(input) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ProfileMedium != null)
                    hashCode = hashCode * 59 + this.ProfileMedium.GetHashCode();
                if (this.CoverPhoto != null)
                    hashCode = hashCode * 59 + this.CoverPhoto.GetHashCode();
                if (this.CoverPhotoSmall != null)
                    hashCode = hashCode * 59 + this.CoverPhotoSmall.GetHashCode();
                if (this.SportType != null)
                    hashCode = hashCode * 59 + this.SportType.GetHashCode();
                if (this.ActivityTypes != null)
                    hashCode = hashCode * 59 + this.ActivityTypes.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this._Private != null)
                    hashCode = hashCode * 59 + this._Private.GetHashCode();
                if (this.MemberCount != null)
                    hashCode = hashCode * 59 + this.MemberCount.GetHashCode();
                if (this.Featured != null)
                    hashCode = hashCode * 59 + this.Featured.GetHashCode();
                if (this.Verified != null)
                    hashCode = hashCode * 59 + this.Verified.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
