/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetailedSegment
    /// </summary>
    [DataContract]
        public partial class DetailedSegment : SummarySegment,  IEquatable<DetailedSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedSegment" /> class.
        /// </summary>
        /// <param name="createdAt">The time at which the segment was created..</param>
        /// <param name="updatedAt">The time at which the segment was last updated..</param>
        /// <param name="totalElevationGain">The segment&#x27;s total elevation gain..</param>
        /// <param name="map">map.</param>
        /// <param name="effortCount">The total number of efforts for this segment.</param>
        /// <param name="athleteCount">The number of unique athletes who have an effort for this segment.</param>
        /// <param name="hazardous">Whether this segment is considered hazardous.</param>
        /// <param name="starCount">The number of stars for this segment.</param>
        public DetailedSegment(DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), float? totalElevationGain = default(float?), PolylineMap map = default(PolylineMap), int? effortCount = default(int?), int? athleteCount = default(int?), bool? hazardous = default(bool?), int? starCount = default(int?), long? id = default(long?), string name = default(string), ActivityTypeEnum? activityType = default(ActivityTypeEnum?), float? distance = default(float?), float? averageGrade = default(float?), float? maximumGrade = default(float?), float? elevationHigh = default(float?), float? elevationLow = default(float?), LatLng startLatlng = default(LatLng), LatLng endLatlng = default(LatLng), int? climbCategory = default(int?), string city = default(string), string state = default(string), string country = default(string), bool? _private = default(bool?), SummarySegmentEffort athletePrEffort = default(SummarySegmentEffort), SummaryPRSegmentEffort athleteSegmentStats = default(SummaryPRSegmentEffort)) : base(id, name, activityType, distance, averageGrade, maximumGrade, elevationHigh, elevationLow, startLatlng, endLatlng, climbCategory, city, state, country, _private, athletePrEffort, athleteSegmentStats)
        {
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.TotalElevationGain = totalElevationGain;
            this.Map = map;
            this.EffortCount = effortCount;
            this.AthleteCount = athleteCount;
            this.Hazardous = hazardous;
            this.StarCount = starCount;
        }
        
        /// <summary>
        /// The time at which the segment was created.
        /// </summary>
        /// <value>The time at which the segment was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The time at which the segment was last updated.
        /// </summary>
        /// <value>The time at which the segment was last updated.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// The segment&#x27;s total elevation gain.
        /// </summary>
        /// <value>The segment&#x27;s total elevation gain.</value>
        [DataMember(Name="total_elevation_gain", EmitDefaultValue=false)]
        public float? TotalElevationGain { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [DataMember(Name="map", EmitDefaultValue=false)]
        public PolylineMap Map { get; set; }

        /// <summary>
        /// The total number of efforts for this segment
        /// </summary>
        /// <value>The total number of efforts for this segment</value>
        [DataMember(Name="effort_count", EmitDefaultValue=false)]
        public int? EffortCount { get; set; }

        /// <summary>
        /// The number of unique athletes who have an effort for this segment
        /// </summary>
        /// <value>The number of unique athletes who have an effort for this segment</value>
        [DataMember(Name="athlete_count", EmitDefaultValue=false)]
        public int? AthleteCount { get; set; }

        /// <summary>
        /// Whether this segment is considered hazardous
        /// </summary>
        /// <value>Whether this segment is considered hazardous</value>
        [DataMember(Name="hazardous", EmitDefaultValue=false)]
        public bool? Hazardous { get; set; }

        /// <summary>
        /// The number of stars for this segment
        /// </summary>
        /// <value>The number of stars for this segment</value>
        [DataMember(Name="star_count", EmitDefaultValue=false)]
        public int? StarCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedSegment {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  TotalElevationGain: ").Append(TotalElevationGain).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  EffortCount: ").Append(EffortCount).Append("\n");
            sb.Append("  AthleteCount: ").Append(AthleteCount).Append("\n");
            sb.Append("  Hazardous: ").Append(Hazardous).Append("\n");
            sb.Append("  StarCount: ").Append(StarCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedSegment);
        }

        /// <summary>
        /// Returns true if DetailedSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedSegment input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && base.Equals(input) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && base.Equals(input) && 
                (
                    this.TotalElevationGain == input.TotalElevationGain ||
                    (this.TotalElevationGain != null &&
                    this.TotalElevationGain.Equals(input.TotalElevationGain))
                ) && base.Equals(input) && 
                (
                    this.Map == input.Map ||
                    (this.Map != null &&
                    this.Map.Equals(input.Map))
                ) && base.Equals(input) && 
                (
                    this.EffortCount == input.EffortCount ||
                    (this.EffortCount != null &&
                    this.EffortCount.Equals(input.EffortCount))
                ) && base.Equals(input) && 
                (
                    this.AthleteCount == input.AthleteCount ||
                    (this.AthleteCount != null &&
                    this.AthleteCount.Equals(input.AthleteCount))
                ) && base.Equals(input) && 
                (
                    this.Hazardous == input.Hazardous ||
                    (this.Hazardous != null &&
                    this.Hazardous.Equals(input.Hazardous))
                ) && base.Equals(input) && 
                (
                    this.StarCount == input.StarCount ||
                    (this.StarCount != null &&
                    this.StarCount.Equals(input.StarCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.TotalElevationGain != null)
                    hashCode = hashCode * 59 + this.TotalElevationGain.GetHashCode();
                if (this.Map != null)
                    hashCode = hashCode * 59 + this.Map.GetHashCode();
                if (this.EffortCount != null)
                    hashCode = hashCode * 59 + this.EffortCount.GetHashCode();
                if (this.AthleteCount != null)
                    hashCode = hashCode * 59 + this.AthleteCount.GetHashCode();
                if (this.Hazardous != null)
                    hashCode = hashCode * 59 + this.Hazardous.GetHashCode();
                if (this.StarCount != null)
                    hashCode = hashCode * 59 + this.StarCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
