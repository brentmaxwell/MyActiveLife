/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ActivitiesBody
    /// </summary>
    [DataContract]
        public partial class ActivitiesBody :  IEquatable<ActivitiesBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesBody" /> class.
        /// </summary>
        /// <param name="name">The name of the activity. (required).</param>
        /// <param name="type">Type of activity. For example - Run, Ride etc. (required).</param>
        /// <param name="startDateLocal">ISO 8601 formatted date time. (required).</param>
        /// <param name="elapsedTime">In seconds. (required).</param>
        /// <param name="description">Description of the activity..</param>
        /// <param name="distance">In meters..</param>
        /// <param name="trainer">Set to 1 to mark as a trainer activity..</param>
        /// <param name="commute">Set to 1 to mark as commute..</param>
        /// <param name="hideFromHome">Set to true to mute activity. (default to false).</param>
        public ActivitiesBody(string name = default(string), string type = default(string), DateTime? startDateLocal = default(DateTime?), int? elapsedTime = default(int?), string description = default(string), float? distance = default(float?), int? trainer = default(int?), int? commute = default(int?), bool? hideFromHome = false)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ActivitiesBody and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ActivitiesBody and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "startDateLocal" is required (not null)
            if (startDateLocal == null)
            {
                throw new InvalidDataException("startDateLocal is a required property for ActivitiesBody and cannot be null");
            }
            else
            {
                this.StartDateLocal = startDateLocal;
            }
            // to ensure "elapsedTime" is required (not null)
            if (elapsedTime == null)
            {
                throw new InvalidDataException("elapsedTime is a required property for ActivitiesBody and cannot be null");
            }
            else
            {
                this.ElapsedTime = elapsedTime;
            }
            this.Description = description;
            this.Distance = distance;
            this.Trainer = trainer;
            this.Commute = commute;
            // use default value if no "hideFromHome" provided
            if (hideFromHome == null)
            {
                this.HideFromHome = false;
            }
            else
            {
                this.HideFromHome = hideFromHome;
            }
        }
        
        /// <summary>
        /// The name of the activity.
        /// </summary>
        /// <value>The name of the activity.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Type of activity. For example - Run, Ride etc.
        /// </summary>
        /// <value>Type of activity. For example - Run, Ride etc.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// ISO 8601 formatted date time.
        /// </summary>
        /// <value>ISO 8601 formatted date time.</value>
        [DataMember(Name="start_date_local", EmitDefaultValue=false)]
        public DateTime? StartDateLocal { get; set; }

        /// <summary>
        /// In seconds.
        /// </summary>
        /// <value>In seconds.</value>
        [DataMember(Name="elapsed_time", EmitDefaultValue=false)]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// Description of the activity.
        /// </summary>
        /// <value>Description of the activity.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// In meters.
        /// </summary>
        /// <value>In meters.</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public float? Distance { get; set; }

        /// <summary>
        /// Set to 1 to mark as a trainer activity.
        /// </summary>
        /// <value>Set to 1 to mark as a trainer activity.</value>
        [DataMember(Name="trainer", EmitDefaultValue=false)]
        public int? Trainer { get; set; }

        /// <summary>
        /// Set to 1 to mark as commute.
        /// </summary>
        /// <value>Set to 1 to mark as commute.</value>
        [DataMember(Name="commute", EmitDefaultValue=false)]
        public int? Commute { get; set; }

        /// <summary>
        /// Set to true to mute activity.
        /// </summary>
        /// <value>Set to true to mute activity.</value>
        [DataMember(Name="hide_from_home", EmitDefaultValue=false)]
        public bool? HideFromHome { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivitiesBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartDateLocal: ").Append(StartDateLocal).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Trainer: ").Append(Trainer).Append("\n");
            sb.Append("  Commute: ").Append(Commute).Append("\n");
            sb.Append("  HideFromHome: ").Append(HideFromHome).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivitiesBody);
        }

        /// <summary>
        /// Returns true if ActivitiesBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivitiesBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivitiesBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StartDateLocal == input.StartDateLocal ||
                    (this.StartDateLocal != null &&
                    this.StartDateLocal.Equals(input.StartDateLocal))
                ) && 
                (
                    this.ElapsedTime == input.ElapsedTime ||
                    (this.ElapsedTime != null &&
                    this.ElapsedTime.Equals(input.ElapsedTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.Trainer == input.Trainer ||
                    (this.Trainer != null &&
                    this.Trainer.Equals(input.Trainer))
                ) && 
                (
                    this.Commute == input.Commute ||
                    (this.Commute != null &&
                    this.Commute.Equals(input.Commute))
                ) && 
                (
                    this.HideFromHome == input.HideFromHome ||
                    (this.HideFromHome != null &&
                    this.HideFromHome.Equals(input.HideFromHome))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StartDateLocal != null)
                    hashCode = hashCode * 59 + this.StartDateLocal.GetHashCode();
                if (this.ElapsedTime != null)
                    hashCode = hashCode * 59 + this.ElapsedTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.Trainer != null)
                    hashCode = hashCode * 59 + this.Trainer.GetHashCode();
                if (this.Commute != null)
                    hashCode = hashCode * 59 + this.Commute.GetHashCode();
                if (this.HideFromHome != null)
                    hashCode = hashCode * 59 + this.HideFromHome.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
