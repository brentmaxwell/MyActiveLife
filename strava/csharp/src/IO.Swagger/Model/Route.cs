/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Route
    /// </summary>
    [DataContract]
        public partial class Route :  IEquatable<Route>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Route" /> class.
        /// </summary>
        /// <param name="athlete">athlete.</param>
        /// <param name="description">The description of the route.</param>
        /// <param name="distance">The route&#x27;s distance, in meters.</param>
        /// <param name="elevationGain">The route&#x27;s elevation gain..</param>
        /// <param name="id">The unique identifier of this route.</param>
        /// <param name="idStr">The unique identifier of the route in string format.</param>
        /// <param name="map">map.</param>
        /// <param name="name">The name of this route.</param>
        /// <param name="_private">Whether this route is private.</param>
        /// <param name="starred">Whether this route is starred by the logged-in athlete.</param>
        /// <param name="timestamp">An epoch timestamp of when the route was created.</param>
        /// <param name="type">This route&#x27;s type (1 for ride, 2 for runs).</param>
        /// <param name="subType">This route&#x27;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed).</param>
        /// <param name="createdAt">The time at which the route was created.</param>
        /// <param name="updatedAt">The time at which the route was last updated.</param>
        /// <param name="estimatedMovingTime">Estimated time in seconds for the authenticated athlete to complete route.</param>
        /// <param name="segments">The segments traversed by this route.</param>
        public Route(SummaryAthlete athlete = default(SummaryAthlete), string description = default(string), float? distance = default(float?), float? elevationGain = default(float?), long? id = default(long?), string idStr = default(string), PolylineMap map = default(PolylineMap), string name = default(string), bool? _private = default(bool?), bool? starred = default(bool?), int? timestamp = default(int?), int? type = default(int?), int? subType = default(int?), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), int? estimatedMovingTime = default(int?), List<SummarySegment> segments = default(List<SummarySegment>))
        {
            this.Athlete = athlete;
            this.Description = description;
            this.Distance = distance;
            this.ElevationGain = elevationGain;
            this.Id = id;
            this.IdStr = idStr;
            this.Map = map;
            this.Name = name;
            this._Private = _private;
            this.Starred = starred;
            this.Timestamp = timestamp;
            this.Type = type;
            this.SubType = subType;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.EstimatedMovingTime = estimatedMovingTime;
            this.Segments = segments;
        }
        
        /// <summary>
        /// Gets or Sets Athlete
        /// </summary>
        [DataMember(Name="athlete", EmitDefaultValue=false)]
        public SummaryAthlete Athlete { get; set; }

        /// <summary>
        /// The description of the route
        /// </summary>
        /// <value>The description of the route</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The route&#x27;s distance, in meters
        /// </summary>
        /// <value>The route&#x27;s distance, in meters</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public float? Distance { get; set; }

        /// <summary>
        /// The route&#x27;s elevation gain.
        /// </summary>
        /// <value>The route&#x27;s elevation gain.</value>
        [DataMember(Name="elevation_gain", EmitDefaultValue=false)]
        public float? ElevationGain { get; set; }

        /// <summary>
        /// The unique identifier of this route
        /// </summary>
        /// <value>The unique identifier of this route</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The unique identifier of the route in string format
        /// </summary>
        /// <value>The unique identifier of the route in string format</value>
        [DataMember(Name="id_str", EmitDefaultValue=false)]
        public string IdStr { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [DataMember(Name="map", EmitDefaultValue=false)]
        public PolylineMap Map { get; set; }

        /// <summary>
        /// The name of this route
        /// </summary>
        /// <value>The name of this route</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether this route is private
        /// </summary>
        /// <value>Whether this route is private</value>
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool? _Private { get; set; }

        /// <summary>
        /// Whether this route is starred by the logged-in athlete
        /// </summary>
        /// <value>Whether this route is starred by the logged-in athlete</value>
        [DataMember(Name="starred", EmitDefaultValue=false)]
        public bool? Starred { get; set; }

        /// <summary>
        /// An epoch timestamp of when the route was created
        /// </summary>
        /// <value>An epoch timestamp of when the route was created</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// This route&#x27;s type (1 for ride, 2 for runs)
        /// </summary>
        /// <value>This route&#x27;s type (1 for ride, 2 for runs)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// This route&#x27;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
        /// </summary>
        /// <value>This route&#x27;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)</value>
        [DataMember(Name="sub_type", EmitDefaultValue=false)]
        public int? SubType { get; set; }

        /// <summary>
        /// The time at which the route was created
        /// </summary>
        /// <value>The time at which the route was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The time at which the route was last updated
        /// </summary>
        /// <value>The time at which the route was last updated</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Estimated time in seconds for the authenticated athlete to complete route
        /// </summary>
        /// <value>Estimated time in seconds for the authenticated athlete to complete route</value>
        [DataMember(Name="estimated_moving_time", EmitDefaultValue=false)]
        public int? EstimatedMovingTime { get; set; }

        /// <summary>
        /// The segments traversed by this route
        /// </summary>
        /// <value>The segments traversed by this route</value>
        [DataMember(Name="segments", EmitDefaultValue=false)]
        public List<SummarySegment> Segments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Route {\n");
            sb.Append("  Athlete: ").Append(Athlete).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  ElevationGain: ").Append(ElevationGain).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdStr: ").Append(IdStr).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Private: ").Append(_Private).Append("\n");
            sb.Append("  Starred: ").Append(Starred).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  EstimatedMovingTime: ").Append(EstimatedMovingTime).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Route);
        }

        /// <summary>
        /// Returns true if Route instances are equal
        /// </summary>
        /// <param name="input">Instance of Route to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Route input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Athlete == input.Athlete ||
                    (this.Athlete != null &&
                    this.Athlete.Equals(input.Athlete))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.ElevationGain == input.ElevationGain ||
                    (this.ElevationGain != null &&
                    this.ElevationGain.Equals(input.ElevationGain))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdStr == input.IdStr ||
                    (this.IdStr != null &&
                    this.IdStr.Equals(input.IdStr))
                ) && 
                (
                    this.Map == input.Map ||
                    (this.Map != null &&
                    this.Map.Equals(input.Map))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this._Private == input._Private ||
                    (this._Private != null &&
                    this._Private.Equals(input._Private))
                ) && 
                (
                    this.Starred == input.Starred ||
                    (this.Starred != null &&
                    this.Starred.Equals(input.Starred))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.EstimatedMovingTime == input.EstimatedMovingTime ||
                    (this.EstimatedMovingTime != null &&
                    this.EstimatedMovingTime.Equals(input.EstimatedMovingTime))
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    input.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Athlete != null)
                    hashCode = hashCode * 59 + this.Athlete.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.ElevationGain != null)
                    hashCode = hashCode * 59 + this.ElevationGain.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdStr != null)
                    hashCode = hashCode * 59 + this.IdStr.GetHashCode();
                if (this.Map != null)
                    hashCode = hashCode * 59 + this.Map.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this._Private != null)
                    hashCode = hashCode * 59 + this._Private.GetHashCode();
                if (this.Starred != null)
                    hashCode = hashCode * 59 + this.Starred.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.EstimatedMovingTime != null)
                    hashCode = hashCode * 59 + this.EstimatedMovingTime.GetHashCode();
                if (this.Segments != null)
                    hashCode = hashCode * 59 + this.Segments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
