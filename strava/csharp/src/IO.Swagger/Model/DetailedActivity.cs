/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetailedActivity
    /// </summary>
    [DataContract]
        public partial class DetailedActivity : SummaryActivity,  IEquatable<DetailedActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedActivity" /> class.
        /// </summary>
        /// <param name="description">The description of the activity.</param>
        /// <param name="photos">photos.</param>
        /// <param name="gear">gear.</param>
        /// <param name="calories">The number of kilocalories consumed during this activity.</param>
        /// <param name="segmentEfforts">segmentEfforts.</param>
        /// <param name="deviceName">The name of the device used to record the activity.</param>
        /// <param name="embedToken">The token used to embed a Strava activity.</param>
        /// <param name="splitsMetric">The splits of this activity in metric units (for runs).</param>
        /// <param name="splitsStandard">The splits of this activity in imperial units (for runs).</param>
        /// <param name="laps">laps.</param>
        /// <param name="bestEfforts">bestEfforts.</param>
        public DetailedActivity(string description = default(string), PhotosSummary photos = default(PhotosSummary), SummaryGear gear = default(SummaryGear), float? calories = default(float?), List<DetailedSegmentEffort> segmentEfforts = default(List<DetailedSegmentEffort>), string deviceName = default(string), string embedToken = default(string), List<Split> splitsMetric = default(List<Split>), List<Split> splitsStandard = default(List<Split>), List<Lap> laps = default(List<Lap>), List<DetailedSegmentEffort> bestEfforts = default(List<DetailedSegmentEffort>), string externalId = default(string), long? uploadId = default(long?), MetaAthlete athlete = default(MetaAthlete), string name = default(string), float? distance = default(float?), int? movingTime = default(int?), int? elapsedTime = default(int?), float? totalElevationGain = default(float?), float? elevHigh = default(float?), float? elevLow = default(float?), ActivityType type = default(ActivityType), DateTime? startDate = default(DateTime?), DateTime? startDateLocal = default(DateTime?), string timezone = default(string), LatLng startLatlng = default(LatLng), LatLng endLatlng = default(LatLng), int? achievementCount = default(int?), int? kudosCount = default(int?), int? commentCount = default(int?), int? athleteCount = default(int?), int? photoCount = default(int?), int? totalPhotoCount = default(int?), PolylineMap map = default(PolylineMap), bool? trainer = default(bool?), bool? commute = default(bool?), bool? manual = default(bool?), bool? _private = default(bool?), bool? flagged = default(bool?), int? workoutType = default(int?), string uploadIdStr = default(string), float? averageSpeed = default(float?), float? maxSpeed = default(float?), bool? hasKudoed = default(bool?), bool? hideFromHome = default(bool?), string gearId = default(string), float? kilojoules = default(float?), float? averageWatts = default(float?), bool? deviceWatts = default(bool?), int? maxWatts = default(int?), int? weightedAverageWatts = default(int?)) : base(externalId, uploadId, athlete, name, distance, movingTime, elapsedTime, totalElevationGain, elevHigh, elevLow, type, startDate, startDateLocal, timezone, startLatlng, endLatlng, achievementCount, kudosCount, commentCount, athleteCount, photoCount, totalPhotoCount, map, trainer, commute, manual, _private, flagged, workoutType, uploadIdStr, averageSpeed, maxSpeed, hasKudoed, hideFromHome, gearId, kilojoules, averageWatts, deviceWatts, maxWatts, weightedAverageWatts)
        {
            this.Description = description;
            this.Photos = photos;
            this.Gear = gear;
            this.Calories = calories;
            this.SegmentEfforts = segmentEfforts;
            this.DeviceName = deviceName;
            this.EmbedToken = embedToken;
            this.SplitsMetric = splitsMetric;
            this.SplitsStandard = splitsStandard;
            this.Laps = laps;
            this.BestEfforts = bestEfforts;
        }
        
        /// <summary>
        /// The description of the activity
        /// </summary>
        /// <value>The description of the activity</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Photos
        /// </summary>
        [DataMember(Name="photos", EmitDefaultValue=false)]
        public PhotosSummary Photos { get; set; }

        /// <summary>
        /// Gets or Sets Gear
        /// </summary>
        [DataMember(Name="gear", EmitDefaultValue=false)]
        public SummaryGear Gear { get; set; }

        /// <summary>
        /// The number of kilocalories consumed during this activity
        /// </summary>
        /// <value>The number of kilocalories consumed during this activity</value>
        [DataMember(Name="calories", EmitDefaultValue=false)]
        public float? Calories { get; set; }

        /// <summary>
        /// Gets or Sets SegmentEfforts
        /// </summary>
        [DataMember(Name="segment_efforts", EmitDefaultValue=false)]
        public List<DetailedSegmentEffort> SegmentEfforts { get; set; }

        /// <summary>
        /// The name of the device used to record the activity
        /// </summary>
        /// <value>The name of the device used to record the activity</value>
        [DataMember(Name="device_name", EmitDefaultValue=false)]
        public string DeviceName { get; set; }

        /// <summary>
        /// The token used to embed a Strava activity
        /// </summary>
        /// <value>The token used to embed a Strava activity</value>
        [DataMember(Name="embed_token", EmitDefaultValue=false)]
        public string EmbedToken { get; set; }

        /// <summary>
        /// The splits of this activity in metric units (for runs)
        /// </summary>
        /// <value>The splits of this activity in metric units (for runs)</value>
        [DataMember(Name="splits_metric", EmitDefaultValue=false)]
        public List<Split> SplitsMetric { get; set; }

        /// <summary>
        /// The splits of this activity in imperial units (for runs)
        /// </summary>
        /// <value>The splits of this activity in imperial units (for runs)</value>
        [DataMember(Name="splits_standard", EmitDefaultValue=false)]
        public List<Split> SplitsStandard { get; set; }

        /// <summary>
        /// Gets or Sets Laps
        /// </summary>
        [DataMember(Name="laps", EmitDefaultValue=false)]
        public List<Lap> Laps { get; set; }

        /// <summary>
        /// Gets or Sets BestEfforts
        /// </summary>
        [DataMember(Name="best_efforts", EmitDefaultValue=false)]
        public List<DetailedSegmentEffort> BestEfforts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedActivity {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Photos: ").Append(Photos).Append("\n");
            sb.Append("  Gear: ").Append(Gear).Append("\n");
            sb.Append("  Calories: ").Append(Calories).Append("\n");
            sb.Append("  SegmentEfforts: ").Append(SegmentEfforts).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("  EmbedToken: ").Append(EmbedToken).Append("\n");
            sb.Append("  SplitsMetric: ").Append(SplitsMetric).Append("\n");
            sb.Append("  SplitsStandard: ").Append(SplitsStandard).Append("\n");
            sb.Append("  Laps: ").Append(Laps).Append("\n");
            sb.Append("  BestEfforts: ").Append(BestEfforts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedActivity);
        }

        /// <summary>
        /// Returns true if DetailedActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedActivity input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Photos == input.Photos ||
                    (this.Photos != null &&
                    this.Photos.Equals(input.Photos))
                ) && base.Equals(input) && 
                (
                    this.Gear == input.Gear ||
                    (this.Gear != null &&
                    this.Gear.Equals(input.Gear))
                ) && base.Equals(input) && 
                (
                    this.Calories == input.Calories ||
                    (this.Calories != null &&
                    this.Calories.Equals(input.Calories))
                ) && base.Equals(input) && 
                (
                    this.SegmentEfforts == input.SegmentEfforts ||
                    this.SegmentEfforts != null &&
                    input.SegmentEfforts != null &&
                    this.SegmentEfforts.SequenceEqual(input.SegmentEfforts)
                ) && base.Equals(input) && 
                (
                    this.DeviceName == input.DeviceName ||
                    (this.DeviceName != null &&
                    this.DeviceName.Equals(input.DeviceName))
                ) && base.Equals(input) && 
                (
                    this.EmbedToken == input.EmbedToken ||
                    (this.EmbedToken != null &&
                    this.EmbedToken.Equals(input.EmbedToken))
                ) && base.Equals(input) && 
                (
                    this.SplitsMetric == input.SplitsMetric ||
                    this.SplitsMetric != null &&
                    input.SplitsMetric != null &&
                    this.SplitsMetric.SequenceEqual(input.SplitsMetric)
                ) && base.Equals(input) && 
                (
                    this.SplitsStandard == input.SplitsStandard ||
                    this.SplitsStandard != null &&
                    input.SplitsStandard != null &&
                    this.SplitsStandard.SequenceEqual(input.SplitsStandard)
                ) && base.Equals(input) && 
                (
                    this.Laps == input.Laps ||
                    this.Laps != null &&
                    input.Laps != null &&
                    this.Laps.SequenceEqual(input.Laps)
                ) && base.Equals(input) && 
                (
                    this.BestEfforts == input.BestEfforts ||
                    this.BestEfforts != null &&
                    input.BestEfforts != null &&
                    this.BestEfforts.SequenceEqual(input.BestEfforts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Photos != null)
                    hashCode = hashCode * 59 + this.Photos.GetHashCode();
                if (this.Gear != null)
                    hashCode = hashCode * 59 + this.Gear.GetHashCode();
                if (this.Calories != null)
                    hashCode = hashCode * 59 + this.Calories.GetHashCode();
                if (this.SegmentEfforts != null)
                    hashCode = hashCode * 59 + this.SegmentEfforts.GetHashCode();
                if (this.DeviceName != null)
                    hashCode = hashCode * 59 + this.DeviceName.GetHashCode();
                if (this.EmbedToken != null)
                    hashCode = hashCode * 59 + this.EmbedToken.GetHashCode();
                if (this.SplitsMetric != null)
                    hashCode = hashCode * 59 + this.SplitsMetric.GetHashCode();
                if (this.SplitsStandard != null)
                    hashCode = hashCode * 59 + this.SplitsStandard.GetHashCode();
                if (this.Laps != null)
                    hashCode = hashCode * 59 + this.Laps.GetHashCode();
                if (this.BestEfforts != null)
                    hashCode = hashCode * 59 + this.BestEfforts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
