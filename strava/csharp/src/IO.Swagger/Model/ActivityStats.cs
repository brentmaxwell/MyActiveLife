/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A set of rolled-up statistics and totals for an athlete
    /// </summary>
    [DataContract]
        public partial class ActivityStats :  IEquatable<ActivityStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityStats" /> class.
        /// </summary>
        /// <param name="biggestRideDistance">The longest distance ridden by the athlete..</param>
        /// <param name="biggestClimbElevationGain">The highest climb ridden by the athlete..</param>
        /// <param name="recentRideTotals">recentRideTotals.</param>
        /// <param name="recentRunTotals">recentRunTotals.</param>
        /// <param name="recentSwimTotals">recentSwimTotals.</param>
        /// <param name="ytdRideTotals">ytdRideTotals.</param>
        /// <param name="ytdRunTotals">ytdRunTotals.</param>
        /// <param name="ytdSwimTotals">ytdSwimTotals.</param>
        /// <param name="allRideTotals">allRideTotals.</param>
        /// <param name="allRunTotals">allRunTotals.</param>
        /// <param name="allSwimTotals">allSwimTotals.</param>
        public ActivityStats(double? biggestRideDistance = default(double?), double? biggestClimbElevationGain = default(double?), ActivityTotal recentRideTotals = default(ActivityTotal), ActivityTotal recentRunTotals = default(ActivityTotal), ActivityTotal recentSwimTotals = default(ActivityTotal), ActivityTotal ytdRideTotals = default(ActivityTotal), ActivityTotal ytdRunTotals = default(ActivityTotal), ActivityTotal ytdSwimTotals = default(ActivityTotal), ActivityTotal allRideTotals = default(ActivityTotal), ActivityTotal allRunTotals = default(ActivityTotal), ActivityTotal allSwimTotals = default(ActivityTotal))
        {
            this.BiggestRideDistance = biggestRideDistance;
            this.BiggestClimbElevationGain = biggestClimbElevationGain;
            this.RecentRideTotals = recentRideTotals;
            this.RecentRunTotals = recentRunTotals;
            this.RecentSwimTotals = recentSwimTotals;
            this.YtdRideTotals = ytdRideTotals;
            this.YtdRunTotals = ytdRunTotals;
            this.YtdSwimTotals = ytdSwimTotals;
            this.AllRideTotals = allRideTotals;
            this.AllRunTotals = allRunTotals;
            this.AllSwimTotals = allSwimTotals;
        }
        
        /// <summary>
        /// The longest distance ridden by the athlete.
        /// </summary>
        /// <value>The longest distance ridden by the athlete.</value>
        [DataMember(Name="biggest_ride_distance", EmitDefaultValue=false)]
        public double? BiggestRideDistance { get; set; }

        /// <summary>
        /// The highest climb ridden by the athlete.
        /// </summary>
        /// <value>The highest climb ridden by the athlete.</value>
        [DataMember(Name="biggest_climb_elevation_gain", EmitDefaultValue=false)]
        public double? BiggestClimbElevationGain { get; set; }

        /// <summary>
        /// Gets or Sets RecentRideTotals
        /// </summary>
        [DataMember(Name="recent_ride_totals", EmitDefaultValue=false)]
        public ActivityTotal RecentRideTotals { get; set; }

        /// <summary>
        /// Gets or Sets RecentRunTotals
        /// </summary>
        [DataMember(Name="recent_run_totals", EmitDefaultValue=false)]
        public ActivityTotal RecentRunTotals { get; set; }

        /// <summary>
        /// Gets or Sets RecentSwimTotals
        /// </summary>
        [DataMember(Name="recent_swim_totals", EmitDefaultValue=false)]
        public ActivityTotal RecentSwimTotals { get; set; }

        /// <summary>
        /// Gets or Sets YtdRideTotals
        /// </summary>
        [DataMember(Name="ytd_ride_totals", EmitDefaultValue=false)]
        public ActivityTotal YtdRideTotals { get; set; }

        /// <summary>
        /// Gets or Sets YtdRunTotals
        /// </summary>
        [DataMember(Name="ytd_run_totals", EmitDefaultValue=false)]
        public ActivityTotal YtdRunTotals { get; set; }

        /// <summary>
        /// Gets or Sets YtdSwimTotals
        /// </summary>
        [DataMember(Name="ytd_swim_totals", EmitDefaultValue=false)]
        public ActivityTotal YtdSwimTotals { get; set; }

        /// <summary>
        /// Gets or Sets AllRideTotals
        /// </summary>
        [DataMember(Name="all_ride_totals", EmitDefaultValue=false)]
        public ActivityTotal AllRideTotals { get; set; }

        /// <summary>
        /// Gets or Sets AllRunTotals
        /// </summary>
        [DataMember(Name="all_run_totals", EmitDefaultValue=false)]
        public ActivityTotal AllRunTotals { get; set; }

        /// <summary>
        /// Gets or Sets AllSwimTotals
        /// </summary>
        [DataMember(Name="all_swim_totals", EmitDefaultValue=false)]
        public ActivityTotal AllSwimTotals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityStats {\n");
            sb.Append("  BiggestRideDistance: ").Append(BiggestRideDistance).Append("\n");
            sb.Append("  BiggestClimbElevationGain: ").Append(BiggestClimbElevationGain).Append("\n");
            sb.Append("  RecentRideTotals: ").Append(RecentRideTotals).Append("\n");
            sb.Append("  RecentRunTotals: ").Append(RecentRunTotals).Append("\n");
            sb.Append("  RecentSwimTotals: ").Append(RecentSwimTotals).Append("\n");
            sb.Append("  YtdRideTotals: ").Append(YtdRideTotals).Append("\n");
            sb.Append("  YtdRunTotals: ").Append(YtdRunTotals).Append("\n");
            sb.Append("  YtdSwimTotals: ").Append(YtdSwimTotals).Append("\n");
            sb.Append("  AllRideTotals: ").Append(AllRideTotals).Append("\n");
            sb.Append("  AllRunTotals: ").Append(AllRunTotals).Append("\n");
            sb.Append("  AllSwimTotals: ").Append(AllSwimTotals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityStats);
        }

        /// <summary>
        /// Returns true if ActivityStats instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BiggestRideDistance == input.BiggestRideDistance ||
                    (this.BiggestRideDistance != null &&
                    this.BiggestRideDistance.Equals(input.BiggestRideDistance))
                ) && 
                (
                    this.BiggestClimbElevationGain == input.BiggestClimbElevationGain ||
                    (this.BiggestClimbElevationGain != null &&
                    this.BiggestClimbElevationGain.Equals(input.BiggestClimbElevationGain))
                ) && 
                (
                    this.RecentRideTotals == input.RecentRideTotals ||
                    (this.RecentRideTotals != null &&
                    this.RecentRideTotals.Equals(input.RecentRideTotals))
                ) && 
                (
                    this.RecentRunTotals == input.RecentRunTotals ||
                    (this.RecentRunTotals != null &&
                    this.RecentRunTotals.Equals(input.RecentRunTotals))
                ) && 
                (
                    this.RecentSwimTotals == input.RecentSwimTotals ||
                    (this.RecentSwimTotals != null &&
                    this.RecentSwimTotals.Equals(input.RecentSwimTotals))
                ) && 
                (
                    this.YtdRideTotals == input.YtdRideTotals ||
                    (this.YtdRideTotals != null &&
                    this.YtdRideTotals.Equals(input.YtdRideTotals))
                ) && 
                (
                    this.YtdRunTotals == input.YtdRunTotals ||
                    (this.YtdRunTotals != null &&
                    this.YtdRunTotals.Equals(input.YtdRunTotals))
                ) && 
                (
                    this.YtdSwimTotals == input.YtdSwimTotals ||
                    (this.YtdSwimTotals != null &&
                    this.YtdSwimTotals.Equals(input.YtdSwimTotals))
                ) && 
                (
                    this.AllRideTotals == input.AllRideTotals ||
                    (this.AllRideTotals != null &&
                    this.AllRideTotals.Equals(input.AllRideTotals))
                ) && 
                (
                    this.AllRunTotals == input.AllRunTotals ||
                    (this.AllRunTotals != null &&
                    this.AllRunTotals.Equals(input.AllRunTotals))
                ) && 
                (
                    this.AllSwimTotals == input.AllSwimTotals ||
                    (this.AllSwimTotals != null &&
                    this.AllSwimTotals.Equals(input.AllSwimTotals))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BiggestRideDistance != null)
                    hashCode = hashCode * 59 + this.BiggestRideDistance.GetHashCode();
                if (this.BiggestClimbElevationGain != null)
                    hashCode = hashCode * 59 + this.BiggestClimbElevationGain.GetHashCode();
                if (this.RecentRideTotals != null)
                    hashCode = hashCode * 59 + this.RecentRideTotals.GetHashCode();
                if (this.RecentRunTotals != null)
                    hashCode = hashCode * 59 + this.RecentRunTotals.GetHashCode();
                if (this.RecentSwimTotals != null)
                    hashCode = hashCode * 59 + this.RecentSwimTotals.GetHashCode();
                if (this.YtdRideTotals != null)
                    hashCode = hashCode * 59 + this.YtdRideTotals.GetHashCode();
                if (this.YtdRunTotals != null)
                    hashCode = hashCode * 59 + this.YtdRunTotals.GetHashCode();
                if (this.YtdSwimTotals != null)
                    hashCode = hashCode * 59 + this.YtdSwimTotals.GetHashCode();
                if (this.AllRideTotals != null)
                    hashCode = hashCode * 59 + this.AllRideTotals.GetHashCode();
                if (this.AllRunTotals != null)
                    hashCode = hashCode * 59 + this.AllRunTotals.GetHashCode();
                if (this.AllSwimTotals != null)
                    hashCode = hashCode * 59 + this.AllSwimTotals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
