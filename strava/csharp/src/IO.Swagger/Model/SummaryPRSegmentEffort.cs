/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SummaryPRSegmentEffort
    /// </summary>
    [DataContract]
        public partial class SummaryPRSegmentEffort :  IEquatable<SummaryPRSegmentEffort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryPRSegmentEffort" /> class.
        /// </summary>
        /// <param name="prActivityId">The unique identifier of the activity related to the PR effort..</param>
        /// <param name="prElapsedTime">The elapsed time ot the PR effort..</param>
        /// <param name="prDate">The time at which the PR effort was started..</param>
        /// <param name="effortCount">Number of efforts by the authenticated athlete on this segment..</param>
        public SummaryPRSegmentEffort(long? prActivityId = default(long?), int? prElapsedTime = default(int?), DateTime? prDate = default(DateTime?), int? effortCount = default(int?))
        {
            this.PrActivityId = prActivityId;
            this.PrElapsedTime = prElapsedTime;
            this.PrDate = prDate;
            this.EffortCount = effortCount;
        }
        
        /// <summary>
        /// The unique identifier of the activity related to the PR effort.
        /// </summary>
        /// <value>The unique identifier of the activity related to the PR effort.</value>
        [DataMember(Name="pr_activity_id", EmitDefaultValue=false)]
        public long? PrActivityId { get; set; }

        /// <summary>
        /// The elapsed time ot the PR effort.
        /// </summary>
        /// <value>The elapsed time ot the PR effort.</value>
        [DataMember(Name="pr_elapsed_time", EmitDefaultValue=false)]
        public int? PrElapsedTime { get; set; }

        /// <summary>
        /// The time at which the PR effort was started.
        /// </summary>
        /// <value>The time at which the PR effort was started.</value>
        [DataMember(Name="pr_date", EmitDefaultValue=false)]
        public DateTime? PrDate { get; set; }

        /// <summary>
        /// Number of efforts by the authenticated athlete on this segment.
        /// </summary>
        /// <value>Number of efforts by the authenticated athlete on this segment.</value>
        [DataMember(Name="effort_count", EmitDefaultValue=false)]
        public int? EffortCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryPRSegmentEffort {\n");
            sb.Append("  PrActivityId: ").Append(PrActivityId).Append("\n");
            sb.Append("  PrElapsedTime: ").Append(PrElapsedTime).Append("\n");
            sb.Append("  PrDate: ").Append(PrDate).Append("\n");
            sb.Append("  EffortCount: ").Append(EffortCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryPRSegmentEffort);
        }

        /// <summary>
        /// Returns true if SummaryPRSegmentEffort instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryPRSegmentEffort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryPRSegmentEffort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrActivityId == input.PrActivityId ||
                    (this.PrActivityId != null &&
                    this.PrActivityId.Equals(input.PrActivityId))
                ) && 
                (
                    this.PrElapsedTime == input.PrElapsedTime ||
                    (this.PrElapsedTime != null &&
                    this.PrElapsedTime.Equals(input.PrElapsedTime))
                ) && 
                (
                    this.PrDate == input.PrDate ||
                    (this.PrDate != null &&
                    this.PrDate.Equals(input.PrDate))
                ) && 
                (
                    this.EffortCount == input.EffortCount ||
                    (this.EffortCount != null &&
                    this.EffortCount.Equals(input.EffortCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrActivityId != null)
                    hashCode = hashCode * 59 + this.PrActivityId.GetHashCode();
                if (this.PrElapsedTime != null)
                    hashCode = hashCode * 59 + this.PrElapsedTime.GetHashCode();
                if (this.PrDate != null)
                    hashCode = hashCode * 59 + this.PrDate.GetHashCode();
                if (this.EffortCount != null)
                    hashCode = hashCode * 59 + this.EffortCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
