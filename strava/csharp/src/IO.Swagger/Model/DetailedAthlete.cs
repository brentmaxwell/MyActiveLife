/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetailedAthlete
    /// </summary>
    [DataContract]
        public partial class DetailedAthlete : SummaryAthlete,  IEquatable<DetailedAthlete>, IValidatableObject
    {
        /// <summary>
        /// The athlete&#x27;s preferred unit system.
        /// </summary>
        /// <value>The athlete&#x27;s preferred unit system.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MeasurementPreferenceEnum
        {
            /// <summary>
            /// Enum Feet for value: feet
            /// </summary>
            [EnumMember(Value = "feet")]
            Feet = 1,
            /// <summary>
            /// Enum Meters for value: meters
            /// </summary>
            [EnumMember(Value = "meters")]
            Meters = 2        }
        /// <summary>
        /// The athlete&#x27;s preferred unit system.
        /// </summary>
        /// <value>The athlete&#x27;s preferred unit system.</value>
        [DataMember(Name="measurement_preference", EmitDefaultValue=false)]
        public MeasurementPreferenceEnum? MeasurementPreference { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedAthlete" /> class.
        /// </summary>
        /// <param name="followerCount">The athlete&#x27;s follower count..</param>
        /// <param name="friendCount">The athlete&#x27;s friend count..</param>
        /// <param name="measurementPreference">The athlete&#x27;s preferred unit system..</param>
        /// <param name="ftp">The athlete&#x27;s FTP (Functional Threshold Power)..</param>
        /// <param name="weight">The athlete&#x27;s weight..</param>
        /// <param name="clubs">The athlete&#x27;s clubs..</param>
        /// <param name="bikes">The athlete&#x27;s bikes..</param>
        /// <param name="shoes">The athlete&#x27;s shoes..</param>
        public DetailedAthlete(int? followerCount = default(int?), int? friendCount = default(int?), MeasurementPreferenceEnum? measurementPreference = default(MeasurementPreferenceEnum?), int? ftp = default(int?), float? weight = default(float?), List<SummaryClub> clubs = default(List<SummaryClub>), List<SummaryGear> bikes = default(List<SummaryGear>), List<SummaryGear> shoes = default(List<SummaryGear>), int? resourceState = default(int?), string firstname = default(string), string lastname = default(string), string profileMedium = default(string), string profile = default(string), string city = default(string), string state = default(string), string country = default(string), SexEnum? sex = default(SexEnum?), bool? premium = default(bool?), bool? summit = default(bool?), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?)) : base(resourceState, firstname, lastname, profileMedium, profile, city, state, country, sex, premium, summit, createdAt, updatedAt)
        {
            this.FollowerCount = followerCount;
            this.FriendCount = friendCount;
            this.MeasurementPreference = measurementPreference;
            this.Ftp = ftp;
            this.Weight = weight;
            this.Clubs = clubs;
            this.Bikes = bikes;
            this.Shoes = shoes;
        }
        
        /// <summary>
        /// The athlete&#x27;s follower count.
        /// </summary>
        /// <value>The athlete&#x27;s follower count.</value>
        [DataMember(Name="follower_count", EmitDefaultValue=false)]
        public int? FollowerCount { get; set; }

        /// <summary>
        /// The athlete&#x27;s friend count.
        /// </summary>
        /// <value>The athlete&#x27;s friend count.</value>
        [DataMember(Name="friend_count", EmitDefaultValue=false)]
        public int? FriendCount { get; set; }


        /// <summary>
        /// The athlete&#x27;s FTP (Functional Threshold Power).
        /// </summary>
        /// <value>The athlete&#x27;s FTP (Functional Threshold Power).</value>
        [DataMember(Name="ftp", EmitDefaultValue=false)]
        public int? Ftp { get; set; }

        /// <summary>
        /// The athlete&#x27;s weight.
        /// </summary>
        /// <value>The athlete&#x27;s weight.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public float? Weight { get; set; }

        /// <summary>
        /// The athlete&#x27;s clubs.
        /// </summary>
        /// <value>The athlete&#x27;s clubs.</value>
        [DataMember(Name="clubs", EmitDefaultValue=false)]
        public List<SummaryClub> Clubs { get; set; }

        /// <summary>
        /// The athlete&#x27;s bikes.
        /// </summary>
        /// <value>The athlete&#x27;s bikes.</value>
        [DataMember(Name="bikes", EmitDefaultValue=false)]
        public List<SummaryGear> Bikes { get; set; }

        /// <summary>
        /// The athlete&#x27;s shoes.
        /// </summary>
        /// <value>The athlete&#x27;s shoes.</value>
        [DataMember(Name="shoes", EmitDefaultValue=false)]
        public List<SummaryGear> Shoes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedAthlete {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FollowerCount: ").Append(FollowerCount).Append("\n");
            sb.Append("  FriendCount: ").Append(FriendCount).Append("\n");
            sb.Append("  MeasurementPreference: ").Append(MeasurementPreference).Append("\n");
            sb.Append("  Ftp: ").Append(Ftp).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Clubs: ").Append(Clubs).Append("\n");
            sb.Append("  Bikes: ").Append(Bikes).Append("\n");
            sb.Append("  Shoes: ").Append(Shoes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedAthlete);
        }

        /// <summary>
        /// Returns true if DetailedAthlete instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedAthlete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedAthlete input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.FollowerCount == input.FollowerCount ||
                    (this.FollowerCount != null &&
                    this.FollowerCount.Equals(input.FollowerCount))
                ) && base.Equals(input) && 
                (
                    this.FriendCount == input.FriendCount ||
                    (this.FriendCount != null &&
                    this.FriendCount.Equals(input.FriendCount))
                ) && base.Equals(input) && 
                (
                    this.MeasurementPreference == input.MeasurementPreference ||
                    (this.MeasurementPreference != null &&
                    this.MeasurementPreference.Equals(input.MeasurementPreference))
                ) && base.Equals(input) && 
                (
                    this.Ftp == input.Ftp ||
                    (this.Ftp != null &&
                    this.Ftp.Equals(input.Ftp))
                ) && base.Equals(input) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && base.Equals(input) && 
                (
                    this.Clubs == input.Clubs ||
                    this.Clubs != null &&
                    input.Clubs != null &&
                    this.Clubs.SequenceEqual(input.Clubs)
                ) && base.Equals(input) && 
                (
                    this.Bikes == input.Bikes ||
                    this.Bikes != null &&
                    input.Bikes != null &&
                    this.Bikes.SequenceEqual(input.Bikes)
                ) && base.Equals(input) && 
                (
                    this.Shoes == input.Shoes ||
                    this.Shoes != null &&
                    input.Shoes != null &&
                    this.Shoes.SequenceEqual(input.Shoes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.FollowerCount != null)
                    hashCode = hashCode * 59 + this.FollowerCount.GetHashCode();
                if (this.FriendCount != null)
                    hashCode = hashCode * 59 + this.FriendCount.GetHashCode();
                if (this.MeasurementPreference != null)
                    hashCode = hashCode * 59 + this.MeasurementPreference.GetHashCode();
                if (this.Ftp != null)
                    hashCode = hashCode * 59 + this.Ftp.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Clubs != null)
                    hashCode = hashCode * 59 + this.Clubs.GetHashCode();
                if (this.Bikes != null)
                    hashCode = hashCode * 59 + this.Bikes.GetHashCode();
                if (this.Shoes != null)
                    hashCode = hashCode * 59 + this.Shoes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
