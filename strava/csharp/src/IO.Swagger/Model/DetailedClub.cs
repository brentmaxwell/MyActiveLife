/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetailedClub
    /// </summary>
    [DataContract]
        public partial class DetailedClub : SummaryClub,  IEquatable<DetailedClub>, IValidatableObject
    {
        /// <summary>
        /// The membership status of the logged-in athlete.
        /// </summary>
        /// <value>The membership status of the logged-in athlete.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MembershipEnum
        {
            /// <summary>
            /// Enum Member for value: member
            /// </summary>
            [EnumMember(Value = "member")]
            Member = 1,
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 2        }
        /// <summary>
        /// The membership status of the logged-in athlete.
        /// </summary>
        /// <value>The membership status of the logged-in athlete.</value>
        [DataMember(Name="membership", EmitDefaultValue=false)]
        public MembershipEnum? Membership { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedClub" /> class.
        /// </summary>
        /// <param name="membership">The membership status of the logged-in athlete..</param>
        /// <param name="admin">Whether the currently logged-in athlete is an administrator of this club..</param>
        /// <param name="owner">Whether the currently logged-in athlete is the owner of this club..</param>
        /// <param name="followingCount">The number of athletes in the club that the logged-in athlete follows..</param>
        public DetailedClub(MembershipEnum? membership = default(MembershipEnum?), bool? admin = default(bool?), bool? owner = default(bool?), int? followingCount = default(int?), string profileMedium = default(string), string coverPhoto = default(string), string coverPhotoSmall = default(string), SportTypeEnum? sportType = default(SportTypeEnum?), List<ActivityType> activityTypes = default(List<ActivityType>), string city = default(string), string state = default(string), string country = default(string), bool? _private = default(bool?), int? memberCount = default(int?), bool? featured = default(bool?), bool? verified = default(bool?), string url = default(string)) : base(profileMedium, coverPhoto, coverPhotoSmall, sportType, activityTypes, city, state, country, _private, memberCount, featured, verified, url)
        {
            this.Membership = membership;
            this.Admin = admin;
            this.Owner = owner;
            this.FollowingCount = followingCount;
        }
        

        /// <summary>
        /// Whether the currently logged-in athlete is an administrator of this club.
        /// </summary>
        /// <value>Whether the currently logged-in athlete is an administrator of this club.</value>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public bool? Admin { get; set; }

        /// <summary>
        /// Whether the currently logged-in athlete is the owner of this club.
        /// </summary>
        /// <value>Whether the currently logged-in athlete is the owner of this club.</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public bool? Owner { get; set; }

        /// <summary>
        /// The number of athletes in the club that the logged-in athlete follows.
        /// </summary>
        /// <value>The number of athletes in the club that the logged-in athlete follows.</value>
        [DataMember(Name="following_count", EmitDefaultValue=false)]
        public int? FollowingCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedClub {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Membership: ").Append(Membership).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedClub);
        }

        /// <summary>
        /// Returns true if DetailedClub instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedClub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedClub input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Membership == input.Membership ||
                    (this.Membership != null &&
                    this.Membership.Equals(input.Membership))
                ) && base.Equals(input) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && base.Equals(input) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && base.Equals(input) && 
                (
                    this.FollowingCount == input.FollowingCount ||
                    (this.FollowingCount != null &&
                    this.FollowingCount.Equals(input.FollowingCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Membership != null)
                    hashCode = hashCode * 59 + this.Membership.GetHashCode();
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.FollowingCount != null)
                    hashCode = hashCode * 59 + this.FollowingCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
