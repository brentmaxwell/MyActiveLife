/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAthletesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Authenticated Athlete
        /// </summary>
        /// <remarks>
        /// Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DetailedAthlete</returns>
        DetailedAthlete GetLoggedInAthlete ();

        /// <summary>
        /// Get Authenticated Athlete
        /// </summary>
        /// <remarks>
        /// Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DetailedAthlete</returns>
        ApiResponse<DetailedAthlete> GetLoggedInAthleteWithHttpInfo ();
        /// <summary>
        /// Get Zones
        /// </summary>
        /// <remarks>
        /// Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Zones</returns>
        Zones GetLoggedInAthleteZones ();

        /// <summary>
        /// Get Zones
        /// </summary>
        /// <remarks>
        /// Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Zones</returns>
        ApiResponse<Zones> GetLoggedInAthleteZonesWithHttpInfo ();
        /// <summary>
        /// Get Athlete Stats
        /// </summary>
        /// <remarks>
        /// Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <returns>ActivityStats</returns>
        ActivityStats GetStats (long? id);

        /// <summary>
        /// Get Athlete Stats
        /// </summary>
        /// <remarks>
        /// Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <returns>ApiResponse of ActivityStats</returns>
        ApiResponse<ActivityStats> GetStatsWithHttpInfo (long? id);
        /// <summary>
        /// Update Athlete
        /// </summary>
        /// <remarks>
        /// Update the currently authenticated athlete. Requires profile:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <returns>DetailedAthlete</returns>
        DetailedAthlete UpdateLoggedInAthlete (float? weight);

        /// <summary>
        /// Update Athlete
        /// </summary>
        /// <remarks>
        /// Update the currently authenticated athlete. Requires profile:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <returns>ApiResponse of DetailedAthlete</returns>
        ApiResponse<DetailedAthlete> UpdateLoggedInAthleteWithHttpInfo (float? weight);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Authenticated Athlete
        /// </summary>
        /// <remarks>
        /// Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DetailedAthlete</returns>
        System.Threading.Tasks.Task<DetailedAthlete> GetLoggedInAthleteAsync ();

        /// <summary>
        /// Get Authenticated Athlete
        /// </summary>
        /// <remarks>
        /// Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DetailedAthlete)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedAthlete>> GetLoggedInAthleteAsyncWithHttpInfo ();
        /// <summary>
        /// Get Zones
        /// </summary>
        /// <remarks>
        /// Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Zones</returns>
        System.Threading.Tasks.Task<Zones> GetLoggedInAthleteZonesAsync ();

        /// <summary>
        /// Get Zones
        /// </summary>
        /// <remarks>
        /// Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Zones)</returns>
        System.Threading.Tasks.Task<ApiResponse<Zones>> GetLoggedInAthleteZonesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Athlete Stats
        /// </summary>
        /// <remarks>
        /// Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <returns>Task of ActivityStats</returns>
        System.Threading.Tasks.Task<ActivityStats> GetStatsAsync (long? id);

        /// <summary>
        /// Get Athlete Stats
        /// </summary>
        /// <remarks>
        /// Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <returns>Task of ApiResponse (ActivityStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivityStats>> GetStatsAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update Athlete
        /// </summary>
        /// <remarks>
        /// Update the currently authenticated athlete. Requires profile:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <returns>Task of DetailedAthlete</returns>
        System.Threading.Tasks.Task<DetailedAthlete> UpdateLoggedInAthleteAsync (float? weight);

        /// <summary>
        /// Update Athlete
        /// </summary>
        /// <remarks>
        /// Update the currently authenticated athlete. Requires profile:write scope.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <returns>Task of ApiResponse (DetailedAthlete)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedAthlete>> UpdateLoggedInAthleteAsyncWithHttpInfo (float? weight);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AthletesApi : IAthletesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AthletesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AthletesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AthletesApi"/> class
        /// </summary>
        /// <returns></returns>
        public AthletesApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AthletesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AthletesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Authenticated Athlete Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DetailedAthlete</returns>
        public DetailedAthlete GetLoggedInAthlete ()
        {
             ApiResponse<DetailedAthlete> localVarResponse = GetLoggedInAthleteWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authenticated Athlete Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DetailedAthlete</returns>
        public ApiResponse< DetailedAthlete > GetLoggedInAthleteWithHttpInfo ()
        {

            var localVarPath = "/athlete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthlete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedAthlete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DetailedAthlete) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedAthlete)));
        }

        /// <summary>
        /// Get Authenticated Athlete Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DetailedAthlete</returns>
        public async System.Threading.Tasks.Task<DetailedAthlete> GetLoggedInAthleteAsync ()
        {
             ApiResponse<DetailedAthlete> localVarResponse = await GetLoggedInAthleteAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Authenticated Athlete Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DetailedAthlete)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedAthlete>> GetLoggedInAthleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/athlete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthlete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedAthlete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DetailedAthlete) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedAthlete)));
        }

        /// <summary>
        /// Get Zones Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Zones</returns>
        public Zones GetLoggedInAthleteZones ()
        {
             ApiResponse<Zones> localVarResponse = GetLoggedInAthleteZonesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Zones Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Zones</returns>
        public ApiResponse< Zones > GetLoggedInAthleteZonesWithHttpInfo ()
        {

            var localVarPath = "/athlete/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthleteZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Zones>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Zones) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Zones)));
        }

        /// <summary>
        /// Get Zones Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Zones</returns>
        public async System.Threading.Tasks.Task<Zones> GetLoggedInAthleteZonesAsync ()
        {
             ApiResponse<Zones> localVarResponse = await GetLoggedInAthleteZonesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Zones Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Zones)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Zones>> GetLoggedInAthleteZonesAsyncWithHttpInfo ()
        {

            var localVarPath = "/athlete/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedInAthleteZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Zones>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Zones) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Zones)));
        }

        /// <summary>
        /// Get Athlete Stats Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <returns>ActivityStats</returns>
        public ActivityStats GetStats (long? id)
        {
             ApiResponse<ActivityStats> localVarResponse = GetStatsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Athlete Stats Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <returns>ApiResponse of ActivityStats</returns>
        public ApiResponse< ActivityStats > GetStatsWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AthletesApi->GetStats");

            var localVarPath = "/athletes/{id}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivityStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActivityStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivityStats)));
        }

        /// <summary>
        /// Get Athlete Stats Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <returns>Task of ActivityStats</returns>
        public async System.Threading.Tasks.Task<ActivityStats> GetStatsAsync (long? id)
        {
             ApiResponse<ActivityStats> localVarResponse = await GetStatsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Athlete Stats Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <returns>Task of ApiResponse (ActivityStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActivityStats>> GetStatsAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AthletesApi->GetStats");

            var localVarPath = "/athletes/{id}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivityStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActivityStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivityStats)));
        }

        /// <summary>
        /// Update Athlete Update the currently authenticated athlete. Requires profile:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <returns>DetailedAthlete</returns>
        public DetailedAthlete UpdateLoggedInAthlete (float? weight)
        {
             ApiResponse<DetailedAthlete> localVarResponse = UpdateLoggedInAthleteWithHttpInfo(weight);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Athlete Update the currently authenticated athlete. Requires profile:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <returns>ApiResponse of DetailedAthlete</returns>
        public ApiResponse< DetailedAthlete > UpdateLoggedInAthleteWithHttpInfo (float? weight)
        {
            // verify the required parameter 'weight' is set
            if (weight == null)
                throw new ApiException(400, "Missing required parameter 'weight' when calling AthletesApi->UpdateLoggedInAthlete");

            var localVarPath = "/athlete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weight != null) localVarPathParams.Add("weight", this.Configuration.ApiClient.ParameterToString(weight)); // path parameter
            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoggedInAthlete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedAthlete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DetailedAthlete) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedAthlete)));
        }

        /// <summary>
        /// Update Athlete Update the currently authenticated athlete. Requires profile:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <returns>Task of DetailedAthlete</returns>
        public async System.Threading.Tasks.Task<DetailedAthlete> UpdateLoggedInAthleteAsync (float? weight)
        {
             ApiResponse<DetailedAthlete> localVarResponse = await UpdateLoggedInAthleteAsyncWithHttpInfo(weight);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Athlete Update the currently authenticated athlete. Requires profile:write scope.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <returns>Task of ApiResponse (DetailedAthlete)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedAthlete>> UpdateLoggedInAthleteAsyncWithHttpInfo (float? weight)
        {
            // verify the required parameter 'weight' is set
            if (weight == null)
                throw new ApiException(400, "Missing required parameter 'weight' when calling AthletesApi->UpdateLoggedInAthlete");

            var localVarPath = "/athlete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weight != null) localVarPathParams.Add("weight", this.Configuration.ApiClient.ParameterToString(weight)); // path parameter
            // authentication (strava_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoggedInAthlete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedAthlete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DetailedAthlete) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedAthlete)));
        }

    }
}
