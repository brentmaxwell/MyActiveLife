/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExplorerSegment : IEquatable<ExplorerSegment>
    { 
        /// <summary>
        /// The unique identifier of this segment
        /// </summary>
        /// <value>The unique identifier of this segment</value>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// The name of this segment
        /// </summary>
        /// <value>The name of this segment</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category &#x3D; 5, climb_category_desc &#x3D; HC. If climb_category &#x3D; 2, climb_category_desc &#x3D; 3.
        /// </summary>
        /// <value>The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category &#x3D; 5, climb_category_desc &#x3D; HC. If climb_category &#x3D; 2, climb_category_desc &#x3D; 3.</value>

        [Range(0, 5)]
        [DataMember(Name="climb_category")]
        public int? ClimbCategory { get; set; }

        /// <summary>
        /// The description for the category of the climb
        /// </summary>
        /// <value>The description for the category of the climb</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ClimbCategoryDescEnum
        {
            /// <summary>
            /// Enum NCEnum for NC
            /// </summary>
            [EnumMember(Value = "NC")]
            NCEnum = 0,
            /// <summary>
            /// Enum NUMBER_4 for 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 1,
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            [EnumMember(Value = "3")]
            NUMBER_3 = 2,
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 3,
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 4,
            /// <summary>
            /// Enum HCEnum for HC
            /// </summary>
            [EnumMember(Value = "HC")]
            HCEnum = 5        }

        /// <summary>
        /// The description for the category of the climb
        /// </summary>
        /// <value>The description for the category of the climb</value>

        [DataMember(Name="climb_category_desc")]
        public ClimbCategoryDescEnum? ClimbCategoryDesc { get; set; }

        /// <summary>
        /// The segment&#x27;s average grade, in percents
        /// </summary>
        /// <value>The segment&#x27;s average grade, in percents</value>

        [DataMember(Name="avg_grade")]
        public float? AvgGrade { get; set; }

        /// <summary>
        /// Gets or Sets StartLatlng
        /// </summary>

        [DataMember(Name="start_latlng")]
        public LatLng StartLatlng { get; set; }

        /// <summary>
        /// Gets or Sets EndLatlng
        /// </summary>

        [DataMember(Name="end_latlng")]
        public LatLng EndLatlng { get; set; }

        /// <summary>
        /// The segments&#x27;s evelation difference, in meters
        /// </summary>
        /// <value>The segments&#x27;s evelation difference, in meters</value>

        [DataMember(Name="elev_difference")]
        public float? ElevDifference { get; set; }

        /// <summary>
        /// The segment&#x27;s distance, in meters
        /// </summary>
        /// <value>The segment&#x27;s distance, in meters</value>

        [DataMember(Name="distance")]
        public float? Distance { get; set; }

        /// <summary>
        /// The polyline of the segment
        /// </summary>
        /// <value>The polyline of the segment</value>

        [DataMember(Name="points")]
        public string Points { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExplorerSegment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ClimbCategory: ").Append(ClimbCategory).Append("\n");
            sb.Append("  ClimbCategoryDesc: ").Append(ClimbCategoryDesc).Append("\n");
            sb.Append("  AvgGrade: ").Append(AvgGrade).Append("\n");
            sb.Append("  StartLatlng: ").Append(StartLatlng).Append("\n");
            sb.Append("  EndLatlng: ").Append(EndLatlng).Append("\n");
            sb.Append("  ElevDifference: ").Append(ElevDifference).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExplorerSegment)obj);
        }

        /// <summary>
        /// Returns true if ExplorerSegment instances are equal
        /// </summary>
        /// <param name="other">Instance of ExplorerSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExplorerSegment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ClimbCategory == other.ClimbCategory ||
                    ClimbCategory != null &&
                    ClimbCategory.Equals(other.ClimbCategory)
                ) && 
                (
                    ClimbCategoryDesc == other.ClimbCategoryDesc ||
                    ClimbCategoryDesc != null &&
                    ClimbCategoryDesc.Equals(other.ClimbCategoryDesc)
                ) && 
                (
                    AvgGrade == other.AvgGrade ||
                    AvgGrade != null &&
                    AvgGrade.Equals(other.AvgGrade)
                ) && 
                (
                    StartLatlng == other.StartLatlng ||
                    StartLatlng != null &&
                    StartLatlng.Equals(other.StartLatlng)
                ) && 
                (
                    EndLatlng == other.EndLatlng ||
                    EndLatlng != null &&
                    EndLatlng.Equals(other.EndLatlng)
                ) && 
                (
                    ElevDifference == other.ElevDifference ||
                    ElevDifference != null &&
                    ElevDifference.Equals(other.ElevDifference)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    Points == other.Points ||
                    Points != null &&
                    Points.Equals(other.Points)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ClimbCategory != null)
                    hashCode = hashCode * 59 + ClimbCategory.GetHashCode();
                    if (ClimbCategoryDesc != null)
                    hashCode = hashCode * 59 + ClimbCategoryDesc.GetHashCode();
                    if (AvgGrade != null)
                    hashCode = hashCode * 59 + AvgGrade.GetHashCode();
                    if (StartLatlng != null)
                    hashCode = hashCode * 59 + StartLatlng.GetHashCode();
                    if (EndLatlng != null)
                    hashCode = hashCode * 59 + EndLatlng.GetHashCode();
                    if (ElevDifference != null)
                    hashCode = hashCode * 59 + ElevDifference.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (Points != null)
                    hashCode = hashCode * 59 + Points.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExplorerSegment left, ExplorerSegment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExplorerSegment left, ExplorerSegment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
