/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Upload : IEquatable<Upload>
    { 
        /// <summary>
        /// The unique identifier of the upload
        /// </summary>
        /// <value>The unique identifier of the upload</value>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// The unique identifier of the upload in string format
        /// </summary>
        /// <value>The unique identifier of the upload in string format</value>

        [DataMember(Name="id_str")]
        public string IdStr { get; set; }

        /// <summary>
        /// The external identifier of the upload
        /// </summary>
        /// <value>The external identifier of the upload</value>

        [DataMember(Name="external_id")]
        public string ExternalId { get; set; }

        /// <summary>
        /// The error associated with this upload
        /// </summary>
        /// <value>The error associated with this upload</value>

        [DataMember(Name="error")]
        public string Error { get; set; }

        /// <summary>
        /// The status of this upload
        /// </summary>
        /// <value>The status of this upload</value>

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// The identifier of the activity this upload resulted into
        /// </summary>
        /// <value>The identifier of the activity this upload resulted into</value>

        [DataMember(Name="activity_id")]
        public long? ActivityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upload {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdStr: ").Append(IdStr).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Upload)obj);
        }

        /// <summary>
        /// Returns true if Upload instances are equal
        /// </summary>
        /// <param name="other">Instance of Upload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upload other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IdStr == other.IdStr ||
                    IdStr != null &&
                    IdStr.Equals(other.IdStr)
                ) && 
                (
                    ExternalId == other.ExternalId ||
                    ExternalId != null &&
                    ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    ActivityId == other.ActivityId ||
                    ActivityId != null &&
                    ActivityId.Equals(other.ActivityId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IdStr != null)
                    hashCode = hashCode * 59 + IdStr.GetHashCode();
                    if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ActivityId != null)
                    hashCode = hashCode * 59 + ActivityId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Upload left, Upload right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Upload left, Upload right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
