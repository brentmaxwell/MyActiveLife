/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SummarySegmentEffort : IEquatable<SummarySegmentEffort>
    { 
        /// <summary>
        /// The unique identifier of this effort
        /// </summary>
        /// <value>The unique identifier of this effort</value>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// The unique identifier of the activity related to this effort
        /// </summary>
        /// <value>The unique identifier of the activity related to this effort</value>

        [DataMember(Name="activity_id")]
        public long? ActivityId { get; set; }

        /// <summary>
        /// The effort&#x27;s elapsed time
        /// </summary>
        /// <value>The effort&#x27;s elapsed time</value>

        [DataMember(Name="elapsed_time")]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The time at which the effort was started.
        /// </summary>
        /// <value>The time at which the effort was started.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The time at which the effort was started in the local timezone.
        /// </summary>
        /// <value>The time at which the effort was started in the local timezone.</value>

        [DataMember(Name="start_date_local")]
        public DateTime? StartDateLocal { get; set; }

        /// <summary>
        /// The effort&#x27;s distance in meters
        /// </summary>
        /// <value>The effort&#x27;s distance in meters</value>

        [DataMember(Name="distance")]
        public float? Distance { get; set; }

        /// <summary>
        /// Whether this effort is the current best on the leaderboard
        /// </summary>
        /// <value>Whether this effort is the current best on the leaderboard</value>

        [DataMember(Name="is_kom")]
        public bool? IsKom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummarySegmentEffort {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartDateLocal: ").Append(StartDateLocal).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  IsKom: ").Append(IsKom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SummarySegmentEffort)obj);
        }

        /// <summary>
        /// Returns true if SummarySegmentEffort instances are equal
        /// </summary>
        /// <param name="other">Instance of SummarySegmentEffort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummarySegmentEffort other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ActivityId == other.ActivityId ||
                    ActivityId != null &&
                    ActivityId.Equals(other.ActivityId)
                ) && 
                (
                    ElapsedTime == other.ElapsedTime ||
                    ElapsedTime != null &&
                    ElapsedTime.Equals(other.ElapsedTime)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    StartDateLocal == other.StartDateLocal ||
                    StartDateLocal != null &&
                    StartDateLocal.Equals(other.StartDateLocal)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    IsKom == other.IsKom ||
                    IsKom != null &&
                    IsKom.Equals(other.IsKom)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ActivityId != null)
                    hashCode = hashCode * 59 + ActivityId.GetHashCode();
                    if (ElapsedTime != null)
                    hashCode = hashCode * 59 + ElapsedTime.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (StartDateLocal != null)
                    hashCode = hashCode * 59 + StartDateLocal.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (IsKom != null)
                    hashCode = hashCode * 59 + IsKom.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SummarySegmentEffort left, SummarySegmentEffort right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SummarySegmentEffort left, SummarySegmentEffort right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
