/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Lap : IEquatable<Lap>
    { 
        /// <summary>
        /// The unique identifier of this lap
        /// </summary>
        /// <value>The unique identifier of this lap</value>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>

        [DataMember(Name="activity")]
        public MetaActivity Activity { get; set; }

        /// <summary>
        /// Gets or Sets Athlete
        /// </summary>

        [DataMember(Name="athlete")]
        public MetaAthlete Athlete { get; set; }

        /// <summary>
        /// The lap&#x27;s average cadence
        /// </summary>
        /// <value>The lap&#x27;s average cadence</value>

        [DataMember(Name="average_cadence")]
        public float? AverageCadence { get; set; }

        /// <summary>
        /// The lap&#x27;s average speed
        /// </summary>
        /// <value>The lap&#x27;s average speed</value>

        [DataMember(Name="average_speed")]
        public float? AverageSpeed { get; set; }

        /// <summary>
        /// The lap&#x27;s distance, in meters
        /// </summary>
        /// <value>The lap&#x27;s distance, in meters</value>

        [DataMember(Name="distance")]
        public float? Distance { get; set; }

        /// <summary>
        /// The lap&#x27;s elapsed time, in seconds
        /// </summary>
        /// <value>The lap&#x27;s elapsed time, in seconds</value>

        [DataMember(Name="elapsed_time")]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The start index of this effort in its activity&#x27;s stream
        /// </summary>
        /// <value>The start index of this effort in its activity&#x27;s stream</value>

        [DataMember(Name="start_index")]
        public int? StartIndex { get; set; }

        /// <summary>
        /// The end index of this effort in its activity&#x27;s stream
        /// </summary>
        /// <value>The end index of this effort in its activity&#x27;s stream</value>

        [DataMember(Name="end_index")]
        public int? EndIndex { get; set; }

        /// <summary>
        /// The index of this lap in the activity it belongs to
        /// </summary>
        /// <value>The index of this lap in the activity it belongs to</value>

        [DataMember(Name="lap_index")]
        public int? LapIndex { get; set; }

        /// <summary>
        /// The maximum speed of this lat, in meters per second
        /// </summary>
        /// <value>The maximum speed of this lat, in meters per second</value>

        [DataMember(Name="max_speed")]
        public float? MaxSpeed { get; set; }

        /// <summary>
        /// The lap&#x27;s moving time, in seconds
        /// </summary>
        /// <value>The lap&#x27;s moving time, in seconds</value>

        [DataMember(Name="moving_time")]
        public int? MovingTime { get; set; }

        /// <summary>
        /// The name of the lap
        /// </summary>
        /// <value>The name of the lap</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The athlete&#x27;s pace zone during this lap
        /// </summary>
        /// <value>The athlete&#x27;s pace zone during this lap</value>

        [DataMember(Name="pace_zone")]
        public int? PaceZone { get; set; }

        /// <summary>
        /// Gets or Sets Split
        /// </summary>

        [DataMember(Name="split")]
        public int? Split { get; set; }

        /// <summary>
        /// The time at which the lap was started.
        /// </summary>
        /// <value>The time at which the lap was started.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The time at which the lap was started in the local timezone.
        /// </summary>
        /// <value>The time at which the lap was started in the local timezone.</value>

        [DataMember(Name="start_date_local")]
        public DateTime? StartDateLocal { get; set; }

        /// <summary>
        /// The elevation gain of this lap, in meters
        /// </summary>
        /// <value>The elevation gain of this lap, in meters</value>

        [DataMember(Name="total_elevation_gain")]
        public float? TotalElevationGain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Lap {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Athlete: ").Append(Athlete).Append("\n");
            sb.Append("  AverageCadence: ").Append(AverageCadence).Append("\n");
            sb.Append("  AverageSpeed: ").Append(AverageSpeed).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  EndIndex: ").Append(EndIndex).Append("\n");
            sb.Append("  LapIndex: ").Append(LapIndex).Append("\n");
            sb.Append("  MaxSpeed: ").Append(MaxSpeed).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PaceZone: ").Append(PaceZone).Append("\n");
            sb.Append("  Split: ").Append(Split).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartDateLocal: ").Append(StartDateLocal).Append("\n");
            sb.Append("  TotalElevationGain: ").Append(TotalElevationGain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Lap)obj);
        }

        /// <summary>
        /// Returns true if Lap instances are equal
        /// </summary>
        /// <param name="other">Instance of Lap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Lap other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Activity == other.Activity ||
                    Activity != null &&
                    Activity.Equals(other.Activity)
                ) && 
                (
                    Athlete == other.Athlete ||
                    Athlete != null &&
                    Athlete.Equals(other.Athlete)
                ) && 
                (
                    AverageCadence == other.AverageCadence ||
                    AverageCadence != null &&
                    AverageCadence.Equals(other.AverageCadence)
                ) && 
                (
                    AverageSpeed == other.AverageSpeed ||
                    AverageSpeed != null &&
                    AverageSpeed.Equals(other.AverageSpeed)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    ElapsedTime == other.ElapsedTime ||
                    ElapsedTime != null &&
                    ElapsedTime.Equals(other.ElapsedTime)
                ) && 
                (
                    StartIndex == other.StartIndex ||
                    StartIndex != null &&
                    StartIndex.Equals(other.StartIndex)
                ) && 
                (
                    EndIndex == other.EndIndex ||
                    EndIndex != null &&
                    EndIndex.Equals(other.EndIndex)
                ) && 
                (
                    LapIndex == other.LapIndex ||
                    LapIndex != null &&
                    LapIndex.Equals(other.LapIndex)
                ) && 
                (
                    MaxSpeed == other.MaxSpeed ||
                    MaxSpeed != null &&
                    MaxSpeed.Equals(other.MaxSpeed)
                ) && 
                (
                    MovingTime == other.MovingTime ||
                    MovingTime != null &&
                    MovingTime.Equals(other.MovingTime)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PaceZone == other.PaceZone ||
                    PaceZone != null &&
                    PaceZone.Equals(other.PaceZone)
                ) && 
                (
                    Split == other.Split ||
                    Split != null &&
                    Split.Equals(other.Split)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    StartDateLocal == other.StartDateLocal ||
                    StartDateLocal != null &&
                    StartDateLocal.Equals(other.StartDateLocal)
                ) && 
                (
                    TotalElevationGain == other.TotalElevationGain ||
                    TotalElevationGain != null &&
                    TotalElevationGain.Equals(other.TotalElevationGain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Activity != null)
                    hashCode = hashCode * 59 + Activity.GetHashCode();
                    if (Athlete != null)
                    hashCode = hashCode * 59 + Athlete.GetHashCode();
                    if (AverageCadence != null)
                    hashCode = hashCode * 59 + AverageCadence.GetHashCode();
                    if (AverageSpeed != null)
                    hashCode = hashCode * 59 + AverageSpeed.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (ElapsedTime != null)
                    hashCode = hashCode * 59 + ElapsedTime.GetHashCode();
                    if (StartIndex != null)
                    hashCode = hashCode * 59 + StartIndex.GetHashCode();
                    if (EndIndex != null)
                    hashCode = hashCode * 59 + EndIndex.GetHashCode();
                    if (LapIndex != null)
                    hashCode = hashCode * 59 + LapIndex.GetHashCode();
                    if (MaxSpeed != null)
                    hashCode = hashCode * 59 + MaxSpeed.GetHashCode();
                    if (MovingTime != null)
                    hashCode = hashCode * 59 + MovingTime.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PaceZone != null)
                    hashCode = hashCode * 59 + PaceZone.GetHashCode();
                    if (Split != null)
                    hashCode = hashCode * 59 + Split.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (StartDateLocal != null)
                    hashCode = hashCode * 59 + StartDateLocal.GetHashCode();
                    if (TotalElevationGain != null)
                    hashCode = hashCode * 59 + TotalElevationGain.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Lap left, Lap right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Lap left, Lap right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
