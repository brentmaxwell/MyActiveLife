/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DetailedActivity : SummaryActivity, IEquatable<DetailedActivity>
    { 
        /// <summary>
        /// The description of the activity
        /// </summary>
        /// <value>The description of the activity</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Photos
        /// </summary>

        [DataMember(Name="photos")]
        public PhotosSummary Photos { get; set; }

        /// <summary>
        /// Gets or Sets Gear
        /// </summary>

        [DataMember(Name="gear")]
        public SummaryGear Gear { get; set; }

        /// <summary>
        /// The number of kilocalories consumed during this activity
        /// </summary>
        /// <value>The number of kilocalories consumed during this activity</value>

        [DataMember(Name="calories")]
        public float? Calories { get; set; }

        /// <summary>
        /// Gets or Sets SegmentEfforts
        /// </summary>

        [DataMember(Name="segment_efforts")]
        public List<DetailedSegmentEffort> SegmentEfforts { get; set; }

        /// <summary>
        /// The name of the device used to record the activity
        /// </summary>
        /// <value>The name of the device used to record the activity</value>

        [DataMember(Name="device_name")]
        public string DeviceName { get; set; }

        /// <summary>
        /// The token used to embed a Strava activity
        /// </summary>
        /// <value>The token used to embed a Strava activity</value>

        [DataMember(Name="embed_token")]
        public string EmbedToken { get; set; }

        /// <summary>
        /// The splits of this activity in metric units (for runs)
        /// </summary>
        /// <value>The splits of this activity in metric units (for runs)</value>

        [DataMember(Name="splits_metric")]
        public List<Split> SplitsMetric { get; set; }

        /// <summary>
        /// The splits of this activity in imperial units (for runs)
        /// </summary>
        /// <value>The splits of this activity in imperial units (for runs)</value>

        [DataMember(Name="splits_standard")]
        public List<Split> SplitsStandard { get; set; }

        /// <summary>
        /// Gets or Sets Laps
        /// </summary>

        [DataMember(Name="laps")]
        public List<Lap> Laps { get; set; }

        /// <summary>
        /// Gets or Sets BestEfforts
        /// </summary>

        [DataMember(Name="best_efforts")]
        public List<DetailedSegmentEffort> BestEfforts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedActivity {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Photos: ").Append(Photos).Append("\n");
            sb.Append("  Gear: ").Append(Gear).Append("\n");
            sb.Append("  Calories: ").Append(Calories).Append("\n");
            sb.Append("  SegmentEfforts: ").Append(SegmentEfforts).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("  EmbedToken: ").Append(EmbedToken).Append("\n");
            sb.Append("  SplitsMetric: ").Append(SplitsMetric).Append("\n");
            sb.Append("  SplitsStandard: ").Append(SplitsStandard).Append("\n");
            sb.Append("  Laps: ").Append(Laps).Append("\n");
            sb.Append("  BestEfforts: ").Append(BestEfforts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DetailedActivity)obj);
        }

        /// <summary>
        /// Returns true if DetailedActivity instances are equal
        /// </summary>
        /// <param name="other">Instance of DetailedActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedActivity other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Photos == other.Photos ||
                    Photos != null &&
                    Photos.Equals(other.Photos)
                ) && 
                (
                    Gear == other.Gear ||
                    Gear != null &&
                    Gear.Equals(other.Gear)
                ) && 
                (
                    Calories == other.Calories ||
                    Calories != null &&
                    Calories.Equals(other.Calories)
                ) && 
                (
                    SegmentEfforts == other.SegmentEfforts ||
                    SegmentEfforts != null &&
                    SegmentEfforts.SequenceEqual(other.SegmentEfforts)
                ) && 
                (
                    DeviceName == other.DeviceName ||
                    DeviceName != null &&
                    DeviceName.Equals(other.DeviceName)
                ) && 
                (
                    EmbedToken == other.EmbedToken ||
                    EmbedToken != null &&
                    EmbedToken.Equals(other.EmbedToken)
                ) && 
                (
                    SplitsMetric == other.SplitsMetric ||
                    SplitsMetric != null &&
                    SplitsMetric.SequenceEqual(other.SplitsMetric)
                ) && 
                (
                    SplitsStandard == other.SplitsStandard ||
                    SplitsStandard != null &&
                    SplitsStandard.SequenceEqual(other.SplitsStandard)
                ) && 
                (
                    Laps == other.Laps ||
                    Laps != null &&
                    Laps.SequenceEqual(other.Laps)
                ) && 
                (
                    BestEfforts == other.BestEfforts ||
                    BestEfforts != null &&
                    BestEfforts.SequenceEqual(other.BestEfforts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Photos != null)
                    hashCode = hashCode * 59 + Photos.GetHashCode();
                    if (Gear != null)
                    hashCode = hashCode * 59 + Gear.GetHashCode();
                    if (Calories != null)
                    hashCode = hashCode * 59 + Calories.GetHashCode();
                    if (SegmentEfforts != null)
                    hashCode = hashCode * 59 + SegmentEfforts.GetHashCode();
                    if (DeviceName != null)
                    hashCode = hashCode * 59 + DeviceName.GetHashCode();
                    if (EmbedToken != null)
                    hashCode = hashCode * 59 + EmbedToken.GetHashCode();
                    if (SplitsMetric != null)
                    hashCode = hashCode * 59 + SplitsMetric.GetHashCode();
                    if (SplitsStandard != null)
                    hashCode = hashCode * 59 + SplitsStandard.GetHashCode();
                    if (Laps != null)
                    hashCode = hashCode * 59 + Laps.GetHashCode();
                    if (BestEfforts != null)
                    hashCode = hashCode * 59 + BestEfforts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DetailedActivity left, DetailedActivity right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DetailedActivity left, DetailedActivity right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
