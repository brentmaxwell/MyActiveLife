/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UploadsBody : IEquatable<UploadsBody>
    { 
        /// <summary>
        /// The uploaded file.
        /// </summary>
        /// <value>The uploaded file.</value>

        [DataMember(Name="file")]
        public byte[] File { get; set; }

        /// <summary>
        /// The desired name of the resulting activity.
        /// </summary>
        /// <value>The desired name of the resulting activity.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The desired description of the resulting activity.
        /// </summary>
        /// <value>The desired description of the resulting activity.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Whether the resulting activity should be marked as having been performed on a trainer.
        /// </summary>
        /// <value>Whether the resulting activity should be marked as having been performed on a trainer.</value>

        [DataMember(Name="trainer")]
        public string Trainer { get; set; }

        /// <summary>
        /// Whether the resulting activity should be tagged as a commute.
        /// </summary>
        /// <value>Whether the resulting activity should be tagged as a commute.</value>

        [DataMember(Name="commute")]
        public string Commute { get; set; }

        /// <summary>
        /// The format of the uploaded file.
        /// </summary>
        /// <value>The format of the uploaded file.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DataTypeEnum
        {
            /// <summary>
            /// Enum FitEnum for fit
            /// </summary>
            [EnumMember(Value = "fit")]
            FitEnum = 0,
            /// <summary>
            /// Enum FitGzEnum for fit.gz
            /// </summary>
            [EnumMember(Value = "fit.gz")]
            FitGzEnum = 1,
            /// <summary>
            /// Enum TcxEnum for tcx
            /// </summary>
            [EnumMember(Value = "tcx")]
            TcxEnum = 2,
            /// <summary>
            /// Enum TcxGzEnum for tcx.gz
            /// </summary>
            [EnumMember(Value = "tcx.gz")]
            TcxGzEnum = 3,
            /// <summary>
            /// Enum GpxEnum for gpx
            /// </summary>
            [EnumMember(Value = "gpx")]
            GpxEnum = 4,
            /// <summary>
            /// Enum GpxGzEnum for gpx.gz
            /// </summary>
            [EnumMember(Value = "gpx.gz")]
            GpxGzEnum = 5        }

        /// <summary>
        /// The format of the uploaded file.
        /// </summary>
        /// <value>The format of the uploaded file.</value>

        [DataMember(Name="data_type")]
        public DataTypeEnum? DataType { get; set; }

        /// <summary>
        /// The desired external identifier of the resulting activity.
        /// </summary>
        /// <value>The desired external identifier of the resulting activity.</value>

        [DataMember(Name="external_id")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadsBody {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Trainer: ").Append(Trainer).Append("\n");
            sb.Append("  Commute: ").Append(Commute).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UploadsBody)obj);
        }

        /// <summary>
        /// Returns true if UploadsBody instances are equal
        /// </summary>
        /// <param name="other">Instance of UploadsBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadsBody other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Trainer == other.Trainer ||
                    Trainer != null &&
                    Trainer.Equals(other.Trainer)
                ) && 
                (
                    Commute == other.Commute ||
                    Commute != null &&
                    Commute.Equals(other.Commute)
                ) && 
                (
                    DataType == other.DataType ||
                    DataType != null &&
                    DataType.Equals(other.DataType)
                ) && 
                (
                    ExternalId == other.ExternalId ||
                    ExternalId != null &&
                    ExternalId.Equals(other.ExternalId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Trainer != null)
                    hashCode = hashCode * 59 + Trainer.GetHashCode();
                    if (Commute != null)
                    hashCode = hashCode * 59 + Commute.GetHashCode();
                    if (DataType != null)
                    hashCode = hashCode * 59 + DataType.GetHashCode();
                    if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UploadsBody left, UploadsBody right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UploadsBody left, UploadsBody right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
