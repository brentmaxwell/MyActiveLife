/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DetailedSegmentEffort : SummarySegmentEffort, IEquatable<DetailedSegmentEffort>
    { 
        /// <summary>
        /// The name of the segment on which this effort was performed
        /// </summary>
        /// <value>The name of the segment on which this effort was performed</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>

        [DataMember(Name="activity")]
        public MetaActivity Activity { get; set; }

        /// <summary>
        /// Gets or Sets Athlete
        /// </summary>

        [DataMember(Name="athlete")]
        public MetaAthlete Athlete { get; set; }

        /// <summary>
        /// The effort&#x27;s moving time
        /// </summary>
        /// <value>The effort&#x27;s moving time</value>

        [DataMember(Name="moving_time")]
        public int? MovingTime { get; set; }

        /// <summary>
        /// The start index of this effort in its activity&#x27;s stream
        /// </summary>
        /// <value>The start index of this effort in its activity&#x27;s stream</value>

        [DataMember(Name="start_index")]
        public int? StartIndex { get; set; }

        /// <summary>
        /// The end index of this effort in its activity&#x27;s stream
        /// </summary>
        /// <value>The end index of this effort in its activity&#x27;s stream</value>

        [DataMember(Name="end_index")]
        public int? EndIndex { get; set; }

        /// <summary>
        /// The effort&#x27;s average cadence
        /// </summary>
        /// <value>The effort&#x27;s average cadence</value>

        [DataMember(Name="average_cadence")]
        public float? AverageCadence { get; set; }

        /// <summary>
        /// The average wattage of this effort
        /// </summary>
        /// <value>The average wattage of this effort</value>

        [DataMember(Name="average_watts")]
        public float? AverageWatts { get; set; }

        /// <summary>
        /// For riding efforts, whether the wattage was reported by a dedicated recording device
        /// </summary>
        /// <value>For riding efforts, whether the wattage was reported by a dedicated recording device</value>

        [DataMember(Name="device_watts")]
        public bool? DeviceWatts { get; set; }

        /// <summary>
        /// The heart heart rate of the athlete during this effort
        /// </summary>
        /// <value>The heart heart rate of the athlete during this effort</value>

        [DataMember(Name="average_heartrate")]
        public float? AverageHeartrate { get; set; }

        /// <summary>
        /// The maximum heart rate of the athlete during this effort
        /// </summary>
        /// <value>The maximum heart rate of the athlete during this effort</value>

        [DataMember(Name="max_heartrate")]
        public float? MaxHeartrate { get; set; }

        /// <summary>
        /// Gets or Sets Segment
        /// </summary>

        [DataMember(Name="segment")]
        public SummarySegment Segment { get; set; }

        /// <summary>
        /// The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
        /// </summary>
        /// <value>The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload</value>

        [Range(1, 10)]
        [DataMember(Name="kom_rank")]
        public int? KomRank { get; set; }

        /// <summary>
        /// The rank of the effort on the athlete&#x27;s leaderboard if it belongs in the top 3 at the time of upload
        /// </summary>
        /// <value>The rank of the effort on the athlete&#x27;s leaderboard if it belongs in the top 3 at the time of upload</value>

        [Range(1, 3)]
        [DataMember(Name="pr_rank")]
        public int? PrRank { get; set; }

        /// <summary>
        /// Whether this effort should be hidden when viewed within an activity
        /// </summary>
        /// <value>Whether this effort should be hidden when viewed within an activity</value>

        [DataMember(Name="hidden")]
        public bool? Hidden { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedSegmentEffort {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Athlete: ").Append(Athlete).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  EndIndex: ").Append(EndIndex).Append("\n");
            sb.Append("  AverageCadence: ").Append(AverageCadence).Append("\n");
            sb.Append("  AverageWatts: ").Append(AverageWatts).Append("\n");
            sb.Append("  DeviceWatts: ").Append(DeviceWatts).Append("\n");
            sb.Append("  AverageHeartrate: ").Append(AverageHeartrate).Append("\n");
            sb.Append("  MaxHeartrate: ").Append(MaxHeartrate).Append("\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  KomRank: ").Append(KomRank).Append("\n");
            sb.Append("  PrRank: ").Append(PrRank).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DetailedSegmentEffort)obj);
        }

        /// <summary>
        /// Returns true if DetailedSegmentEffort instances are equal
        /// </summary>
        /// <param name="other">Instance of DetailedSegmentEffort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedSegmentEffort other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Activity == other.Activity ||
                    Activity != null &&
                    Activity.Equals(other.Activity)
                ) && 
                (
                    Athlete == other.Athlete ||
                    Athlete != null &&
                    Athlete.Equals(other.Athlete)
                ) && 
                (
                    MovingTime == other.MovingTime ||
                    MovingTime != null &&
                    MovingTime.Equals(other.MovingTime)
                ) && 
                (
                    StartIndex == other.StartIndex ||
                    StartIndex != null &&
                    StartIndex.Equals(other.StartIndex)
                ) && 
                (
                    EndIndex == other.EndIndex ||
                    EndIndex != null &&
                    EndIndex.Equals(other.EndIndex)
                ) && 
                (
                    AverageCadence == other.AverageCadence ||
                    AverageCadence != null &&
                    AverageCadence.Equals(other.AverageCadence)
                ) && 
                (
                    AverageWatts == other.AverageWatts ||
                    AverageWatts != null &&
                    AverageWatts.Equals(other.AverageWatts)
                ) && 
                (
                    DeviceWatts == other.DeviceWatts ||
                    DeviceWatts != null &&
                    DeviceWatts.Equals(other.DeviceWatts)
                ) && 
                (
                    AverageHeartrate == other.AverageHeartrate ||
                    AverageHeartrate != null &&
                    AverageHeartrate.Equals(other.AverageHeartrate)
                ) && 
                (
                    MaxHeartrate == other.MaxHeartrate ||
                    MaxHeartrate != null &&
                    MaxHeartrate.Equals(other.MaxHeartrate)
                ) && 
                (
                    Segment == other.Segment ||
                    Segment != null &&
                    Segment.Equals(other.Segment)
                ) && 
                (
                    KomRank == other.KomRank ||
                    KomRank != null &&
                    KomRank.Equals(other.KomRank)
                ) && 
                (
                    PrRank == other.PrRank ||
                    PrRank != null &&
                    PrRank.Equals(other.PrRank)
                ) && 
                (
                    Hidden == other.Hidden ||
                    Hidden != null &&
                    Hidden.Equals(other.Hidden)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Activity != null)
                    hashCode = hashCode * 59 + Activity.GetHashCode();
                    if (Athlete != null)
                    hashCode = hashCode * 59 + Athlete.GetHashCode();
                    if (MovingTime != null)
                    hashCode = hashCode * 59 + MovingTime.GetHashCode();
                    if (StartIndex != null)
                    hashCode = hashCode * 59 + StartIndex.GetHashCode();
                    if (EndIndex != null)
                    hashCode = hashCode * 59 + EndIndex.GetHashCode();
                    if (AverageCadence != null)
                    hashCode = hashCode * 59 + AverageCadence.GetHashCode();
                    if (AverageWatts != null)
                    hashCode = hashCode * 59 + AverageWatts.GetHashCode();
                    if (DeviceWatts != null)
                    hashCode = hashCode * 59 + DeviceWatts.GetHashCode();
                    if (AverageHeartrate != null)
                    hashCode = hashCode * 59 + AverageHeartrate.GetHashCode();
                    if (MaxHeartrate != null)
                    hashCode = hashCode * 59 + MaxHeartrate.GetHashCode();
                    if (Segment != null)
                    hashCode = hashCode * 59 + Segment.GetHashCode();
                    if (KomRank != null)
                    hashCode = hashCode * 59 + KomRank.GetHashCode();
                    if (PrRank != null)
                    hashCode = hashCode * 59 + PrRank.GetHashCode();
                    if (Hidden != null)
                    hashCode = hashCode * 59 + Hidden.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DetailedSegmentEffort left, DetailedSegmentEffort right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DetailedSegmentEffort left, DetailedSegmentEffort right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
