/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SummaryActivity : MetaActivity, IEquatable<SummaryActivity>
    { 
        /// <summary>
        /// The identifier provided at upload time
        /// </summary>
        /// <value>The identifier provided at upload time</value>

        [DataMember(Name="external_id")]
        public string ExternalId { get; set; }

        /// <summary>
        /// The identifier of the upload that resulted in this activity
        /// </summary>
        /// <value>The identifier of the upload that resulted in this activity</value>

        [DataMember(Name="upload_id")]
        public long? UploadId { get; set; }

        /// <summary>
        /// Gets or Sets Athlete
        /// </summary>

        [DataMember(Name="athlete")]
        public MetaAthlete Athlete { get; set; }

        /// <summary>
        /// The name of the activity
        /// </summary>
        /// <value>The name of the activity</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The activity&#x27;s distance, in meters
        /// </summary>
        /// <value>The activity&#x27;s distance, in meters</value>

        [DataMember(Name="distance")]
        public float? Distance { get; set; }

        /// <summary>
        /// The activity&#x27;s moving time, in seconds
        /// </summary>
        /// <value>The activity&#x27;s moving time, in seconds</value>

        [DataMember(Name="moving_time")]
        public int? MovingTime { get; set; }

        /// <summary>
        /// The activity&#x27;s elapsed time, in seconds
        /// </summary>
        /// <value>The activity&#x27;s elapsed time, in seconds</value>

        [DataMember(Name="elapsed_time")]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The activity&#x27;s total elevation gain.
        /// </summary>
        /// <value>The activity&#x27;s total elevation gain.</value>

        [DataMember(Name="total_elevation_gain")]
        public float? TotalElevationGain { get; set; }

        /// <summary>
        /// The activity&#x27;s highest elevation, in meters
        /// </summary>
        /// <value>The activity&#x27;s highest elevation, in meters</value>

        [DataMember(Name="elev_high")]
        public float? ElevHigh { get; set; }

        /// <summary>
        /// The activity&#x27;s lowest elevation, in meters
        /// </summary>
        /// <value>The activity&#x27;s lowest elevation, in meters</value>

        [DataMember(Name="elev_low")]
        public float? ElevLow { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public ActivityType Type { get; set; }

        /// <summary>
        /// The time at which the activity was started.
        /// </summary>
        /// <value>The time at which the activity was started.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The time at which the activity was started in the local timezone.
        /// </summary>
        /// <value>The time at which the activity was started in the local timezone.</value>

        [DataMember(Name="start_date_local")]
        public DateTime? StartDateLocal { get; set; }

        /// <summary>
        /// The timezone of the activity
        /// </summary>
        /// <value>The timezone of the activity</value>

        [DataMember(Name="timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets StartLatlng
        /// </summary>

        [DataMember(Name="start_latlng")]
        public LatLng StartLatlng { get; set; }

        /// <summary>
        /// Gets or Sets EndLatlng
        /// </summary>

        [DataMember(Name="end_latlng")]
        public LatLng EndLatlng { get; set; }

        /// <summary>
        /// The number of achievements gained during this activity
        /// </summary>
        /// <value>The number of achievements gained during this activity</value>

        [DataMember(Name="achievement_count")]
        public int? AchievementCount { get; set; }

        /// <summary>
        /// The number of kudos given for this activity
        /// </summary>
        /// <value>The number of kudos given for this activity</value>

        [DataMember(Name="kudos_count")]
        public int? KudosCount { get; set; }

        /// <summary>
        /// The number of comments for this activity
        /// </summary>
        /// <value>The number of comments for this activity</value>

        [DataMember(Name="comment_count")]
        public int? CommentCount { get; set; }

        /// <summary>
        /// The number of athletes for taking part in a group activity
        /// </summary>
        /// <value>The number of athletes for taking part in a group activity</value>

        [DataMember(Name="athlete_count")]
        public int? AthleteCount { get; set; }

        /// <summary>
        /// The number of Instagram photos for this activity
        /// </summary>
        /// <value>The number of Instagram photos for this activity</value>

        [DataMember(Name="photo_count")]
        public int? PhotoCount { get; set; }

        /// <summary>
        /// The number of Instagram and Strava photos for this activity
        /// </summary>
        /// <value>The number of Instagram and Strava photos for this activity</value>

        [DataMember(Name="total_photo_count")]
        public int? TotalPhotoCount { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>

        [DataMember(Name="map")]
        public PolylineMap Map { get; set; }

        /// <summary>
        /// Whether this activity was recorded on a training machine
        /// </summary>
        /// <value>Whether this activity was recorded on a training machine</value>

        [DataMember(Name="trainer")]
        public bool? Trainer { get; set; }

        /// <summary>
        /// Whether this activity is a commute
        /// </summary>
        /// <value>Whether this activity is a commute</value>

        [DataMember(Name="commute")]
        public bool? Commute { get; set; }

        /// <summary>
        /// Whether this activity was created manually
        /// </summary>
        /// <value>Whether this activity was created manually</value>

        [DataMember(Name="manual")]
        public bool? Manual { get; set; }

        /// <summary>
        /// Whether this activity is private
        /// </summary>
        /// <value>Whether this activity is private</value>

        [DataMember(Name="private")]
        public bool? _Private { get; set; }

        /// <summary>
        /// Whether this activity is flagged
        /// </summary>
        /// <value>Whether this activity is flagged</value>

        [DataMember(Name="flagged")]
        public bool? Flagged { get; set; }

        /// <summary>
        /// The activity&#x27;s workout type
        /// </summary>
        /// <value>The activity&#x27;s workout type</value>

        [DataMember(Name="workout_type")]
        public int? WorkoutType { get; set; }

        /// <summary>
        /// The unique identifier of the upload in string format
        /// </summary>
        /// <value>The unique identifier of the upload in string format</value>

        [DataMember(Name="upload_id_str")]
        public string UploadIdStr { get; set; }

        /// <summary>
        /// The activity&#x27;s average speed, in meters per second
        /// </summary>
        /// <value>The activity&#x27;s average speed, in meters per second</value>

        [DataMember(Name="average_speed")]
        public float? AverageSpeed { get; set; }

        /// <summary>
        /// The activity&#x27;s max speed, in meters per second
        /// </summary>
        /// <value>The activity&#x27;s max speed, in meters per second</value>

        [DataMember(Name="max_speed")]
        public float? MaxSpeed { get; set; }

        /// <summary>
        /// Whether the logged-in athlete has kudoed this activity
        /// </summary>
        /// <value>Whether the logged-in athlete has kudoed this activity</value>

        [DataMember(Name="has_kudoed")]
        public bool? HasKudoed { get; set; }

        /// <summary>
        /// Whether the activity is muted
        /// </summary>
        /// <value>Whether the activity is muted</value>

        [DataMember(Name="hide_from_home")]
        public bool? HideFromHome { get; set; }

        /// <summary>
        /// The id of the gear for the activity
        /// </summary>
        /// <value>The id of the gear for the activity</value>

        [DataMember(Name="gear_id")]
        public string GearId { get; set; }

        /// <summary>
        /// The total work done in kilojoules during this activity. Rides only
        /// </summary>
        /// <value>The total work done in kilojoules during this activity. Rides only</value>

        [DataMember(Name="kilojoules")]
        public float? Kilojoules { get; set; }

        /// <summary>
        /// Average power output in watts during this activity. Rides only
        /// </summary>
        /// <value>Average power output in watts during this activity. Rides only</value>

        [DataMember(Name="average_watts")]
        public float? AverageWatts { get; set; }

        /// <summary>
        /// Whether the watts are from a power meter, false if estimated
        /// </summary>
        /// <value>Whether the watts are from a power meter, false if estimated</value>

        [DataMember(Name="device_watts")]
        public bool? DeviceWatts { get; set; }

        /// <summary>
        /// Rides with power meter data only
        /// </summary>
        /// <value>Rides with power meter data only</value>

        [DataMember(Name="max_watts")]
        public int? MaxWatts { get; set; }

        /// <summary>
        /// Similar to Normalized Power. Rides with power meter data only
        /// </summary>
        /// <value>Similar to Normalized Power. Rides with power meter data only</value>

        [DataMember(Name="weighted_average_watts")]
        public int? WeightedAverageWatts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryActivity {\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("  Athlete: ").Append(Athlete).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  TotalElevationGain: ").Append(TotalElevationGain).Append("\n");
            sb.Append("  ElevHigh: ").Append(ElevHigh).Append("\n");
            sb.Append("  ElevLow: ").Append(ElevLow).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartDateLocal: ").Append(StartDateLocal).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  StartLatlng: ").Append(StartLatlng).Append("\n");
            sb.Append("  EndLatlng: ").Append(EndLatlng).Append("\n");
            sb.Append("  AchievementCount: ").Append(AchievementCount).Append("\n");
            sb.Append("  KudosCount: ").Append(KudosCount).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  AthleteCount: ").Append(AthleteCount).Append("\n");
            sb.Append("  PhotoCount: ").Append(PhotoCount).Append("\n");
            sb.Append("  TotalPhotoCount: ").Append(TotalPhotoCount).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Trainer: ").Append(Trainer).Append("\n");
            sb.Append("  Commute: ").Append(Commute).Append("\n");
            sb.Append("  Manual: ").Append(Manual).Append("\n");
            sb.Append("  _Private: ").Append(_Private).Append("\n");
            sb.Append("  Flagged: ").Append(Flagged).Append("\n");
            sb.Append("  WorkoutType: ").Append(WorkoutType).Append("\n");
            sb.Append("  UploadIdStr: ").Append(UploadIdStr).Append("\n");
            sb.Append("  AverageSpeed: ").Append(AverageSpeed).Append("\n");
            sb.Append("  MaxSpeed: ").Append(MaxSpeed).Append("\n");
            sb.Append("  HasKudoed: ").Append(HasKudoed).Append("\n");
            sb.Append("  HideFromHome: ").Append(HideFromHome).Append("\n");
            sb.Append("  GearId: ").Append(GearId).Append("\n");
            sb.Append("  Kilojoules: ").Append(Kilojoules).Append("\n");
            sb.Append("  AverageWatts: ").Append(AverageWatts).Append("\n");
            sb.Append("  DeviceWatts: ").Append(DeviceWatts).Append("\n");
            sb.Append("  MaxWatts: ").Append(MaxWatts).Append("\n");
            sb.Append("  WeightedAverageWatts: ").Append(WeightedAverageWatts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SummaryActivity)obj);
        }

        /// <summary>
        /// Returns true if SummaryActivity instances are equal
        /// </summary>
        /// <param name="other">Instance of SummaryActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryActivity other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExternalId == other.ExternalId ||
                    ExternalId != null &&
                    ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    UploadId == other.UploadId ||
                    UploadId != null &&
                    UploadId.Equals(other.UploadId)
                ) && 
                (
                    Athlete == other.Athlete ||
                    Athlete != null &&
                    Athlete.Equals(other.Athlete)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    MovingTime == other.MovingTime ||
                    MovingTime != null &&
                    MovingTime.Equals(other.MovingTime)
                ) && 
                (
                    ElapsedTime == other.ElapsedTime ||
                    ElapsedTime != null &&
                    ElapsedTime.Equals(other.ElapsedTime)
                ) && 
                (
                    TotalElevationGain == other.TotalElevationGain ||
                    TotalElevationGain != null &&
                    TotalElevationGain.Equals(other.TotalElevationGain)
                ) && 
                (
                    ElevHigh == other.ElevHigh ||
                    ElevHigh != null &&
                    ElevHigh.Equals(other.ElevHigh)
                ) && 
                (
                    ElevLow == other.ElevLow ||
                    ElevLow != null &&
                    ElevLow.Equals(other.ElevLow)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    StartDateLocal == other.StartDateLocal ||
                    StartDateLocal != null &&
                    StartDateLocal.Equals(other.StartDateLocal)
                ) && 
                (
                    Timezone == other.Timezone ||
                    Timezone != null &&
                    Timezone.Equals(other.Timezone)
                ) && 
                (
                    StartLatlng == other.StartLatlng ||
                    StartLatlng != null &&
                    StartLatlng.Equals(other.StartLatlng)
                ) && 
                (
                    EndLatlng == other.EndLatlng ||
                    EndLatlng != null &&
                    EndLatlng.Equals(other.EndLatlng)
                ) && 
                (
                    AchievementCount == other.AchievementCount ||
                    AchievementCount != null &&
                    AchievementCount.Equals(other.AchievementCount)
                ) && 
                (
                    KudosCount == other.KudosCount ||
                    KudosCount != null &&
                    KudosCount.Equals(other.KudosCount)
                ) && 
                (
                    CommentCount == other.CommentCount ||
                    CommentCount != null &&
                    CommentCount.Equals(other.CommentCount)
                ) && 
                (
                    AthleteCount == other.AthleteCount ||
                    AthleteCount != null &&
                    AthleteCount.Equals(other.AthleteCount)
                ) && 
                (
                    PhotoCount == other.PhotoCount ||
                    PhotoCount != null &&
                    PhotoCount.Equals(other.PhotoCount)
                ) && 
                (
                    TotalPhotoCount == other.TotalPhotoCount ||
                    TotalPhotoCount != null &&
                    TotalPhotoCount.Equals(other.TotalPhotoCount)
                ) && 
                (
                    Map == other.Map ||
                    Map != null &&
                    Map.Equals(other.Map)
                ) && 
                (
                    Trainer == other.Trainer ||
                    Trainer != null &&
                    Trainer.Equals(other.Trainer)
                ) && 
                (
                    Commute == other.Commute ||
                    Commute != null &&
                    Commute.Equals(other.Commute)
                ) && 
                (
                    Manual == other.Manual ||
                    Manual != null &&
                    Manual.Equals(other.Manual)
                ) && 
                (
                    _Private == other._Private ||
                    _Private != null &&
                    _Private.Equals(other._Private)
                ) && 
                (
                    Flagged == other.Flagged ||
                    Flagged != null &&
                    Flagged.Equals(other.Flagged)
                ) && 
                (
                    WorkoutType == other.WorkoutType ||
                    WorkoutType != null &&
                    WorkoutType.Equals(other.WorkoutType)
                ) && 
                (
                    UploadIdStr == other.UploadIdStr ||
                    UploadIdStr != null &&
                    UploadIdStr.Equals(other.UploadIdStr)
                ) && 
                (
                    AverageSpeed == other.AverageSpeed ||
                    AverageSpeed != null &&
                    AverageSpeed.Equals(other.AverageSpeed)
                ) && 
                (
                    MaxSpeed == other.MaxSpeed ||
                    MaxSpeed != null &&
                    MaxSpeed.Equals(other.MaxSpeed)
                ) && 
                (
                    HasKudoed == other.HasKudoed ||
                    HasKudoed != null &&
                    HasKudoed.Equals(other.HasKudoed)
                ) && 
                (
                    HideFromHome == other.HideFromHome ||
                    HideFromHome != null &&
                    HideFromHome.Equals(other.HideFromHome)
                ) && 
                (
                    GearId == other.GearId ||
                    GearId != null &&
                    GearId.Equals(other.GearId)
                ) && 
                (
                    Kilojoules == other.Kilojoules ||
                    Kilojoules != null &&
                    Kilojoules.Equals(other.Kilojoules)
                ) && 
                (
                    AverageWatts == other.AverageWatts ||
                    AverageWatts != null &&
                    AverageWatts.Equals(other.AverageWatts)
                ) && 
                (
                    DeviceWatts == other.DeviceWatts ||
                    DeviceWatts != null &&
                    DeviceWatts.Equals(other.DeviceWatts)
                ) && 
                (
                    MaxWatts == other.MaxWatts ||
                    MaxWatts != null &&
                    MaxWatts.Equals(other.MaxWatts)
                ) && 
                (
                    WeightedAverageWatts == other.WeightedAverageWatts ||
                    WeightedAverageWatts != null &&
                    WeightedAverageWatts.Equals(other.WeightedAverageWatts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                    if (UploadId != null)
                    hashCode = hashCode * 59 + UploadId.GetHashCode();
                    if (Athlete != null)
                    hashCode = hashCode * 59 + Athlete.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (MovingTime != null)
                    hashCode = hashCode * 59 + MovingTime.GetHashCode();
                    if (ElapsedTime != null)
                    hashCode = hashCode * 59 + ElapsedTime.GetHashCode();
                    if (TotalElevationGain != null)
                    hashCode = hashCode * 59 + TotalElevationGain.GetHashCode();
                    if (ElevHigh != null)
                    hashCode = hashCode * 59 + ElevHigh.GetHashCode();
                    if (ElevLow != null)
                    hashCode = hashCode * 59 + ElevLow.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (StartDateLocal != null)
                    hashCode = hashCode * 59 + StartDateLocal.GetHashCode();
                    if (Timezone != null)
                    hashCode = hashCode * 59 + Timezone.GetHashCode();
                    if (StartLatlng != null)
                    hashCode = hashCode * 59 + StartLatlng.GetHashCode();
                    if (EndLatlng != null)
                    hashCode = hashCode * 59 + EndLatlng.GetHashCode();
                    if (AchievementCount != null)
                    hashCode = hashCode * 59 + AchievementCount.GetHashCode();
                    if (KudosCount != null)
                    hashCode = hashCode * 59 + KudosCount.GetHashCode();
                    if (CommentCount != null)
                    hashCode = hashCode * 59 + CommentCount.GetHashCode();
                    if (AthleteCount != null)
                    hashCode = hashCode * 59 + AthleteCount.GetHashCode();
                    if (PhotoCount != null)
                    hashCode = hashCode * 59 + PhotoCount.GetHashCode();
                    if (TotalPhotoCount != null)
                    hashCode = hashCode * 59 + TotalPhotoCount.GetHashCode();
                    if (Map != null)
                    hashCode = hashCode * 59 + Map.GetHashCode();
                    if (Trainer != null)
                    hashCode = hashCode * 59 + Trainer.GetHashCode();
                    if (Commute != null)
                    hashCode = hashCode * 59 + Commute.GetHashCode();
                    if (Manual != null)
                    hashCode = hashCode * 59 + Manual.GetHashCode();
                    if (_Private != null)
                    hashCode = hashCode * 59 + _Private.GetHashCode();
                    if (Flagged != null)
                    hashCode = hashCode * 59 + Flagged.GetHashCode();
                    if (WorkoutType != null)
                    hashCode = hashCode * 59 + WorkoutType.GetHashCode();
                    if (UploadIdStr != null)
                    hashCode = hashCode * 59 + UploadIdStr.GetHashCode();
                    if (AverageSpeed != null)
                    hashCode = hashCode * 59 + AverageSpeed.GetHashCode();
                    if (MaxSpeed != null)
                    hashCode = hashCode * 59 + MaxSpeed.GetHashCode();
                    if (HasKudoed != null)
                    hashCode = hashCode * 59 + HasKudoed.GetHashCode();
                    if (HideFromHome != null)
                    hashCode = hashCode * 59 + HideFromHome.GetHashCode();
                    if (GearId != null)
                    hashCode = hashCode * 59 + GearId.GetHashCode();
                    if (Kilojoules != null)
                    hashCode = hashCode * 59 + Kilojoules.GetHashCode();
                    if (AverageWatts != null)
                    hashCode = hashCode * 59 + AverageWatts.GetHashCode();
                    if (DeviceWatts != null)
                    hashCode = hashCode * 59 + DeviceWatts.GetHashCode();
                    if (MaxWatts != null)
                    hashCode = hashCode * 59 + MaxWatts.GetHashCode();
                    if (WeightedAverageWatts != null)
                    hashCode = hashCode * 59 + WeightedAverageWatts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SummaryActivity left, SummaryActivity right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SummaryActivity left, SummaryActivity right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
