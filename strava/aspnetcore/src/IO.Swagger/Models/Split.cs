/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Split : IEquatable<Split>
    { 
        /// <summary>
        /// The average speed of this split, in meters per second
        /// </summary>
        /// <value>The average speed of this split, in meters per second</value>

        [DataMember(Name="average_speed")]
        public float? AverageSpeed { get; set; }

        /// <summary>
        /// The distance of this split, in meters
        /// </summary>
        /// <value>The distance of this split, in meters</value>

        [DataMember(Name="distance")]
        public float? Distance { get; set; }

        /// <summary>
        /// The elapsed time of this split, in seconds
        /// </summary>
        /// <value>The elapsed time of this split, in seconds</value>

        [DataMember(Name="elapsed_time")]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The elevation difference of this split, in meters
        /// </summary>
        /// <value>The elevation difference of this split, in meters</value>

        [DataMember(Name="elevation_difference")]
        public float? ElevationDifference { get; set; }

        /// <summary>
        /// The pacing zone of this split
        /// </summary>
        /// <value>The pacing zone of this split</value>

        [DataMember(Name="pace_zone")]
        public int? PaceZone { get; set; }

        /// <summary>
        /// The moving time of this split, in seconds
        /// </summary>
        /// <value>The moving time of this split, in seconds</value>

        [DataMember(Name="moving_time")]
        public int? MovingTime { get; set; }

        /// <summary>
        /// N/A
        /// </summary>
        /// <value>N/A</value>

        [DataMember(Name="split")]
        public int? _Split { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Split {\n");
            sb.Append("  AverageSpeed: ").Append(AverageSpeed).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  ElevationDifference: ").Append(ElevationDifference).Append("\n");
            sb.Append("  PaceZone: ").Append(PaceZone).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  _Split: ").Append(_Split).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Split)obj);
        }

        /// <summary>
        /// Returns true if Split instances are equal
        /// </summary>
        /// <param name="other">Instance of Split to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Split other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AverageSpeed == other.AverageSpeed ||
                    AverageSpeed != null &&
                    AverageSpeed.Equals(other.AverageSpeed)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    ElapsedTime == other.ElapsedTime ||
                    ElapsedTime != null &&
                    ElapsedTime.Equals(other.ElapsedTime)
                ) && 
                (
                    ElevationDifference == other.ElevationDifference ||
                    ElevationDifference != null &&
                    ElevationDifference.Equals(other.ElevationDifference)
                ) && 
                (
                    PaceZone == other.PaceZone ||
                    PaceZone != null &&
                    PaceZone.Equals(other.PaceZone)
                ) && 
                (
                    MovingTime == other.MovingTime ||
                    MovingTime != null &&
                    MovingTime.Equals(other.MovingTime)
                ) && 
                (
                    _Split == other._Split ||
                    _Split != null &&
                    _Split.Equals(other._Split)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AverageSpeed != null)
                    hashCode = hashCode * 59 + AverageSpeed.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (ElapsedTime != null)
                    hashCode = hashCode * 59 + ElapsedTime.GetHashCode();
                    if (ElevationDifference != null)
                    hashCode = hashCode * 59 + ElevationDifference.GetHashCode();
                    if (PaceZone != null)
                    hashCode = hashCode * 59 + PaceZone.GetHashCode();
                    if (MovingTime != null)
                    hashCode = hashCode * 59 + MovingTime.GetHashCode();
                    if (_Split != null)
                    hashCode = hashCode * 59 + _Split.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Split left, Split right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Split left, Split right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
