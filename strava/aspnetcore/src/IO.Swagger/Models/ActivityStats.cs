/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A set of rolled-up statistics and totals for an athlete
    /// </summary>
    [DataContract]
    public partial class ActivityStats : IEquatable<ActivityStats>
    { 
        /// <summary>
        /// The longest distance ridden by the athlete.
        /// </summary>
        /// <value>The longest distance ridden by the athlete.</value>

        [DataMember(Name="biggest_ride_distance")]
        public double? BiggestRideDistance { get; set; }

        /// <summary>
        /// The highest climb ridden by the athlete.
        /// </summary>
        /// <value>The highest climb ridden by the athlete.</value>

        [DataMember(Name="biggest_climb_elevation_gain")]
        public double? BiggestClimbElevationGain { get; set; }

        /// <summary>
        /// Gets or Sets RecentRideTotals
        /// </summary>

        [DataMember(Name="recent_ride_totals")]
        public ActivityTotal RecentRideTotals { get; set; }

        /// <summary>
        /// Gets or Sets RecentRunTotals
        /// </summary>

        [DataMember(Name="recent_run_totals")]
        public ActivityTotal RecentRunTotals { get; set; }

        /// <summary>
        /// Gets or Sets RecentSwimTotals
        /// </summary>

        [DataMember(Name="recent_swim_totals")]
        public ActivityTotal RecentSwimTotals { get; set; }

        /// <summary>
        /// Gets or Sets YtdRideTotals
        /// </summary>

        [DataMember(Name="ytd_ride_totals")]
        public ActivityTotal YtdRideTotals { get; set; }

        /// <summary>
        /// Gets or Sets YtdRunTotals
        /// </summary>

        [DataMember(Name="ytd_run_totals")]
        public ActivityTotal YtdRunTotals { get; set; }

        /// <summary>
        /// Gets or Sets YtdSwimTotals
        /// </summary>

        [DataMember(Name="ytd_swim_totals")]
        public ActivityTotal YtdSwimTotals { get; set; }

        /// <summary>
        /// Gets or Sets AllRideTotals
        /// </summary>

        [DataMember(Name="all_ride_totals")]
        public ActivityTotal AllRideTotals { get; set; }

        /// <summary>
        /// Gets or Sets AllRunTotals
        /// </summary>

        [DataMember(Name="all_run_totals")]
        public ActivityTotal AllRunTotals { get; set; }

        /// <summary>
        /// Gets or Sets AllSwimTotals
        /// </summary>

        [DataMember(Name="all_swim_totals")]
        public ActivityTotal AllSwimTotals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityStats {\n");
            sb.Append("  BiggestRideDistance: ").Append(BiggestRideDistance).Append("\n");
            sb.Append("  BiggestClimbElevationGain: ").Append(BiggestClimbElevationGain).Append("\n");
            sb.Append("  RecentRideTotals: ").Append(RecentRideTotals).Append("\n");
            sb.Append("  RecentRunTotals: ").Append(RecentRunTotals).Append("\n");
            sb.Append("  RecentSwimTotals: ").Append(RecentSwimTotals).Append("\n");
            sb.Append("  YtdRideTotals: ").Append(YtdRideTotals).Append("\n");
            sb.Append("  YtdRunTotals: ").Append(YtdRunTotals).Append("\n");
            sb.Append("  YtdSwimTotals: ").Append(YtdSwimTotals).Append("\n");
            sb.Append("  AllRideTotals: ").Append(AllRideTotals).Append("\n");
            sb.Append("  AllRunTotals: ").Append(AllRunTotals).Append("\n");
            sb.Append("  AllSwimTotals: ").Append(AllSwimTotals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActivityStats)obj);
        }

        /// <summary>
        /// Returns true if ActivityStats instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityStats other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BiggestRideDistance == other.BiggestRideDistance ||
                    BiggestRideDistance != null &&
                    BiggestRideDistance.Equals(other.BiggestRideDistance)
                ) && 
                (
                    BiggestClimbElevationGain == other.BiggestClimbElevationGain ||
                    BiggestClimbElevationGain != null &&
                    BiggestClimbElevationGain.Equals(other.BiggestClimbElevationGain)
                ) && 
                (
                    RecentRideTotals == other.RecentRideTotals ||
                    RecentRideTotals != null &&
                    RecentRideTotals.Equals(other.RecentRideTotals)
                ) && 
                (
                    RecentRunTotals == other.RecentRunTotals ||
                    RecentRunTotals != null &&
                    RecentRunTotals.Equals(other.RecentRunTotals)
                ) && 
                (
                    RecentSwimTotals == other.RecentSwimTotals ||
                    RecentSwimTotals != null &&
                    RecentSwimTotals.Equals(other.RecentSwimTotals)
                ) && 
                (
                    YtdRideTotals == other.YtdRideTotals ||
                    YtdRideTotals != null &&
                    YtdRideTotals.Equals(other.YtdRideTotals)
                ) && 
                (
                    YtdRunTotals == other.YtdRunTotals ||
                    YtdRunTotals != null &&
                    YtdRunTotals.Equals(other.YtdRunTotals)
                ) && 
                (
                    YtdSwimTotals == other.YtdSwimTotals ||
                    YtdSwimTotals != null &&
                    YtdSwimTotals.Equals(other.YtdSwimTotals)
                ) && 
                (
                    AllRideTotals == other.AllRideTotals ||
                    AllRideTotals != null &&
                    AllRideTotals.Equals(other.AllRideTotals)
                ) && 
                (
                    AllRunTotals == other.AllRunTotals ||
                    AllRunTotals != null &&
                    AllRunTotals.Equals(other.AllRunTotals)
                ) && 
                (
                    AllSwimTotals == other.AllSwimTotals ||
                    AllSwimTotals != null &&
                    AllSwimTotals.Equals(other.AllSwimTotals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BiggestRideDistance != null)
                    hashCode = hashCode * 59 + BiggestRideDistance.GetHashCode();
                    if (BiggestClimbElevationGain != null)
                    hashCode = hashCode * 59 + BiggestClimbElevationGain.GetHashCode();
                    if (RecentRideTotals != null)
                    hashCode = hashCode * 59 + RecentRideTotals.GetHashCode();
                    if (RecentRunTotals != null)
                    hashCode = hashCode * 59 + RecentRunTotals.GetHashCode();
                    if (RecentSwimTotals != null)
                    hashCode = hashCode * 59 + RecentSwimTotals.GetHashCode();
                    if (YtdRideTotals != null)
                    hashCode = hashCode * 59 + YtdRideTotals.GetHashCode();
                    if (YtdRunTotals != null)
                    hashCode = hashCode * 59 + YtdRunTotals.GetHashCode();
                    if (YtdSwimTotals != null)
                    hashCode = hashCode * 59 + YtdSwimTotals.GetHashCode();
                    if (AllRideTotals != null)
                    hashCode = hashCode * 59 + AllRideTotals.GetHashCode();
                    if (AllRunTotals != null)
                    hashCode = hashCode * 59 + AllRunTotals.GetHashCode();
                    if (AllSwimTotals != null)
                    hashCode = hashCode * 59 + AllSwimTotals.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActivityStats left, ActivityStats right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActivityStats left, ActivityStats right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
