/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Route : IEquatable<Route>
    { 
        /// <summary>
        /// Gets or Sets Athlete
        /// </summary>

        [DataMember(Name="athlete")]
        public SummaryAthlete Athlete { get; set; }

        /// <summary>
        /// The description of the route
        /// </summary>
        /// <value>The description of the route</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The route&#x27;s distance, in meters
        /// </summary>
        /// <value>The route&#x27;s distance, in meters</value>

        [DataMember(Name="distance")]
        public float? Distance { get; set; }

        /// <summary>
        /// The route&#x27;s elevation gain.
        /// </summary>
        /// <value>The route&#x27;s elevation gain.</value>

        [DataMember(Name="elevation_gain")]
        public float? ElevationGain { get; set; }

        /// <summary>
        /// The unique identifier of this route
        /// </summary>
        /// <value>The unique identifier of this route</value>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// The unique identifier of the route in string format
        /// </summary>
        /// <value>The unique identifier of the route in string format</value>

        [DataMember(Name="id_str")]
        public string IdStr { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>

        [DataMember(Name="map")]
        public PolylineMap Map { get; set; }

        /// <summary>
        /// The name of this route
        /// </summary>
        /// <value>The name of this route</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Whether this route is private
        /// </summary>
        /// <value>Whether this route is private</value>

        [DataMember(Name="private")]
        public bool? _Private { get; set; }

        /// <summary>
        /// Whether this route is starred by the logged-in athlete
        /// </summary>
        /// <value>Whether this route is starred by the logged-in athlete</value>

        [DataMember(Name="starred")]
        public bool? Starred { get; set; }

        /// <summary>
        /// An epoch timestamp of when the route was created
        /// </summary>
        /// <value>An epoch timestamp of when the route was created</value>

        [DataMember(Name="timestamp")]
        public int? Timestamp { get; set; }

        /// <summary>
        /// This route&#x27;s type (1 for ride, 2 for runs)
        /// </summary>
        /// <value>This route&#x27;s type (1 for ride, 2 for runs)</value>

        [DataMember(Name="type")]
        public int? Type { get; set; }

        /// <summary>
        /// This route&#x27;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
        /// </summary>
        /// <value>This route&#x27;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)</value>

        [DataMember(Name="sub_type")]
        public int? SubType { get; set; }

        /// <summary>
        /// The time at which the route was created
        /// </summary>
        /// <value>The time at which the route was created</value>

        [DataMember(Name="created_at")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The time at which the route was last updated
        /// </summary>
        /// <value>The time at which the route was last updated</value>

        [DataMember(Name="updated_at")]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Estimated time in seconds for the authenticated athlete to complete route
        /// </summary>
        /// <value>Estimated time in seconds for the authenticated athlete to complete route</value>

        [DataMember(Name="estimated_moving_time")]
        public int? EstimatedMovingTime { get; set; }

        /// <summary>
        /// The segments traversed by this route
        /// </summary>
        /// <value>The segments traversed by this route</value>

        [DataMember(Name="segments")]
        public List<SummarySegment> Segments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Route {\n");
            sb.Append("  Athlete: ").Append(Athlete).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  ElevationGain: ").Append(ElevationGain).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdStr: ").Append(IdStr).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Private: ").Append(_Private).Append("\n");
            sb.Append("  Starred: ").Append(Starred).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  EstimatedMovingTime: ").Append(EstimatedMovingTime).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Route)obj);
        }

        /// <summary>
        /// Returns true if Route instances are equal
        /// </summary>
        /// <param name="other">Instance of Route to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Route other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Athlete == other.Athlete ||
                    Athlete != null &&
                    Athlete.Equals(other.Athlete)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    ElevationGain == other.ElevationGain ||
                    ElevationGain != null &&
                    ElevationGain.Equals(other.ElevationGain)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IdStr == other.IdStr ||
                    IdStr != null &&
                    IdStr.Equals(other.IdStr)
                ) && 
                (
                    Map == other.Map ||
                    Map != null &&
                    Map.Equals(other.Map)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    _Private == other._Private ||
                    _Private != null &&
                    _Private.Equals(other._Private)
                ) && 
                (
                    Starred == other.Starred ||
                    Starred != null &&
                    Starred.Equals(other.Starred)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    SubType == other.SubType ||
                    SubType != null &&
                    SubType.Equals(other.SubType)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    EstimatedMovingTime == other.EstimatedMovingTime ||
                    EstimatedMovingTime != null &&
                    EstimatedMovingTime.Equals(other.EstimatedMovingTime)
                ) && 
                (
                    Segments == other.Segments ||
                    Segments != null &&
                    Segments.SequenceEqual(other.Segments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Athlete != null)
                    hashCode = hashCode * 59 + Athlete.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (ElevationGain != null)
                    hashCode = hashCode * 59 + ElevationGain.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IdStr != null)
                    hashCode = hashCode * 59 + IdStr.GetHashCode();
                    if (Map != null)
                    hashCode = hashCode * 59 + Map.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (_Private != null)
                    hashCode = hashCode * 59 + _Private.GetHashCode();
                    if (Starred != null)
                    hashCode = hashCode * 59 + Starred.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (SubType != null)
                    hashCode = hashCode * 59 + SubType.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (EstimatedMovingTime != null)
                    hashCode = hashCode * 59 + EstimatedMovingTime.GetHashCode();
                    if (Segments != null)
                    hashCode = hashCode * 59 + Segments.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Route left, Route right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Route left, Route right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
