/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
    /// </summary>
    [DataContract]
    public partial class ActivityTotal : IEquatable<ActivityTotal>
    { 
        /// <summary>
        /// The number of activities considered in this total.
        /// </summary>
        /// <value>The number of activities considered in this total.</value>

        [DataMember(Name="count")]
        public int? Count { get; set; }

        /// <summary>
        /// The total distance covered by the considered activities.
        /// </summary>
        /// <value>The total distance covered by the considered activities.</value>

        [DataMember(Name="distance")]
        public float? Distance { get; set; }

        /// <summary>
        /// The total moving time of the considered activities.
        /// </summary>
        /// <value>The total moving time of the considered activities.</value>

        [DataMember(Name="moving_time")]
        public int? MovingTime { get; set; }

        /// <summary>
        /// The total elapsed time of the considered activities.
        /// </summary>
        /// <value>The total elapsed time of the considered activities.</value>

        [DataMember(Name="elapsed_time")]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The total elevation gain of the considered activities.
        /// </summary>
        /// <value>The total elevation gain of the considered activities.</value>

        [DataMember(Name="elevation_gain")]
        public float? ElevationGain { get; set; }

        /// <summary>
        /// The total number of achievements of the considered activities.
        /// </summary>
        /// <value>The total number of achievements of the considered activities.</value>

        [DataMember(Name="achievement_count")]
        public int? AchievementCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityTotal {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  ElevationGain: ").Append(ElevationGain).Append("\n");
            sb.Append("  AchievementCount: ").Append(AchievementCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActivityTotal)obj);
        }

        /// <summary>
        /// Returns true if ActivityTotal instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityTotal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityTotal other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Count == other.Count ||
                    Count != null &&
                    Count.Equals(other.Count)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    MovingTime == other.MovingTime ||
                    MovingTime != null &&
                    MovingTime.Equals(other.MovingTime)
                ) && 
                (
                    ElapsedTime == other.ElapsedTime ||
                    ElapsedTime != null &&
                    ElapsedTime.Equals(other.ElapsedTime)
                ) && 
                (
                    ElevationGain == other.ElevationGain ||
                    ElevationGain != null &&
                    ElevationGain.Equals(other.ElevationGain)
                ) && 
                (
                    AchievementCount == other.AchievementCount ||
                    AchievementCount != null &&
                    AchievementCount.Equals(other.AchievementCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Count != null)
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (MovingTime != null)
                    hashCode = hashCode * 59 + MovingTime.GetHashCode();
                    if (ElapsedTime != null)
                    hashCode = hashCode * 59 + ElapsedTime.GetHashCode();
                    if (ElevationGain != null)
                    hashCode = hashCode * 59 + ElevationGain.GetHashCode();
                    if (AchievementCount != null)
                    hashCode = hashCode * 59 + AchievementCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActivityTotal left, ActivityTotal right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActivityTotal left, ActivityTotal right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
