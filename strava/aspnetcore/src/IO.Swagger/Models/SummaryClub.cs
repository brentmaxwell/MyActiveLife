/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SummaryClub : MetaClub, IEquatable<SummaryClub>
    { 
        /// <summary>
        /// URL to a 60x60 pixel profile picture.
        /// </summary>
        /// <value>URL to a 60x60 pixel profile picture.</value>

        [DataMember(Name="profile_medium")]
        public string ProfileMedium { get; set; }

        /// <summary>
        /// URL to a ~1185x580 pixel cover photo.
        /// </summary>
        /// <value>URL to a ~1185x580 pixel cover photo.</value>

        [DataMember(Name="cover_photo")]
        public string CoverPhoto { get; set; }

        /// <summary>
        /// URL to a ~360x176  pixel cover photo.
        /// </summary>
        /// <value>URL to a ~360x176  pixel cover photo.</value>

        [DataMember(Name="cover_photo_small")]
        public string CoverPhotoSmall { get; set; }

        /// <summary>
        /// Deprecated. Prefer to use activity_types.
        /// </summary>
        /// <value>Deprecated. Prefer to use activity_types.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SportTypeEnum
        {
            /// <summary>
            /// Enum CyclingEnum for cycling
            /// </summary>
            [EnumMember(Value = "cycling")]
            CyclingEnum = 0,
            /// <summary>
            /// Enum RunningEnum for running
            /// </summary>
            [EnumMember(Value = "running")]
            RunningEnum = 1,
            /// <summary>
            /// Enum TriathlonEnum for triathlon
            /// </summary>
            [EnumMember(Value = "triathlon")]
            TriathlonEnum = 2,
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 3        }

        /// <summary>
        /// Deprecated. Prefer to use activity_types.
        /// </summary>
        /// <value>Deprecated. Prefer to use activity_types.</value>

        [DataMember(Name="sport_type")]
        public SportTypeEnum? SportType { get; set; }

        /// <summary>
        /// The activity types that count for a club. This takes precedence over sport_type.
        /// </summary>
        /// <value>The activity types that count for a club. This takes precedence over sport_type.</value>

        [DataMember(Name="activity_types")]
        public List<ActivityType> ActivityTypes { get; set; }

        /// <summary>
        /// The club&#x27;s city.
        /// </summary>
        /// <value>The club&#x27;s city.</value>

        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The club&#x27;s state or geographical region.
        /// </summary>
        /// <value>The club&#x27;s state or geographical region.</value>

        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// The club&#x27;s country.
        /// </summary>
        /// <value>The club&#x27;s country.</value>

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Whether the club is private.
        /// </summary>
        /// <value>Whether the club is private.</value>

        [DataMember(Name="private")]
        public bool? _Private { get; set; }

        /// <summary>
        /// The club&#x27;s member count.
        /// </summary>
        /// <value>The club&#x27;s member count.</value>

        [DataMember(Name="member_count")]
        public int? MemberCount { get; set; }

        /// <summary>
        /// Whether the club is featured or not.
        /// </summary>
        /// <value>Whether the club is featured or not.</value>

        [DataMember(Name="featured")]
        public bool? Featured { get; set; }

        /// <summary>
        /// Whether the club is verified or not.
        /// </summary>
        /// <value>Whether the club is verified or not.</value>

        [DataMember(Name="verified")]
        public bool? Verified { get; set; }

        /// <summary>
        /// The club&#x27;s vanity URL.
        /// </summary>
        /// <value>The club&#x27;s vanity URL.</value>

        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryClub {\n");
            sb.Append("  ProfileMedium: ").Append(ProfileMedium).Append("\n");
            sb.Append("  CoverPhoto: ").Append(CoverPhoto).Append("\n");
            sb.Append("  CoverPhotoSmall: ").Append(CoverPhotoSmall).Append("\n");
            sb.Append("  SportType: ").Append(SportType).Append("\n");
            sb.Append("  ActivityTypes: ").Append(ActivityTypes).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  _Private: ").Append(_Private).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  Featured: ").Append(Featured).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SummaryClub)obj);
        }

        /// <summary>
        /// Returns true if SummaryClub instances are equal
        /// </summary>
        /// <param name="other">Instance of SummaryClub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryClub other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProfileMedium == other.ProfileMedium ||
                    ProfileMedium != null &&
                    ProfileMedium.Equals(other.ProfileMedium)
                ) && 
                (
                    CoverPhoto == other.CoverPhoto ||
                    CoverPhoto != null &&
                    CoverPhoto.Equals(other.CoverPhoto)
                ) && 
                (
                    CoverPhotoSmall == other.CoverPhotoSmall ||
                    CoverPhotoSmall != null &&
                    CoverPhotoSmall.Equals(other.CoverPhotoSmall)
                ) && 
                (
                    SportType == other.SportType ||
                    SportType != null &&
                    SportType.Equals(other.SportType)
                ) && 
                (
                    ActivityTypes == other.ActivityTypes ||
                    ActivityTypes != null &&
                    ActivityTypes.SequenceEqual(other.ActivityTypes)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    _Private == other._Private ||
                    _Private != null &&
                    _Private.Equals(other._Private)
                ) && 
                (
                    MemberCount == other.MemberCount ||
                    MemberCount != null &&
                    MemberCount.Equals(other.MemberCount)
                ) && 
                (
                    Featured == other.Featured ||
                    Featured != null &&
                    Featured.Equals(other.Featured)
                ) && 
                (
                    Verified == other.Verified ||
                    Verified != null &&
                    Verified.Equals(other.Verified)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProfileMedium != null)
                    hashCode = hashCode * 59 + ProfileMedium.GetHashCode();
                    if (CoverPhoto != null)
                    hashCode = hashCode * 59 + CoverPhoto.GetHashCode();
                    if (CoverPhotoSmall != null)
                    hashCode = hashCode * 59 + CoverPhotoSmall.GetHashCode();
                    if (SportType != null)
                    hashCode = hashCode * 59 + SportType.GetHashCode();
                    if (ActivityTypes != null)
                    hashCode = hashCode * 59 + ActivityTypes.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (_Private != null)
                    hashCode = hashCode * 59 + _Private.GetHashCode();
                    if (MemberCount != null)
                    hashCode = hashCode * 59 + MemberCount.GetHashCode();
                    if (Featured != null)
                    hashCode = hashCode * 59 + Featured.GetHashCode();
                    if (Verified != null)
                    hashCode = hashCode * 59 + Verified.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SummaryClub left, SummaryClub right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SummaryClub left, SummaryClub right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
