/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SummaryAthlete : MetaAthlete, IEquatable<SummaryAthlete>
    { 
        /// <summary>
        /// Resource state, indicates level of detail. Possible values: 1 -&gt; \&quot;meta\&quot;, 2 -&gt; \&quot;summary\&quot;, 3 -&gt; \&quot;detail\&quot;
        /// </summary>
        /// <value>Resource state, indicates level of detail. Possible values: 1 -&gt; \&quot;meta\&quot;, 2 -&gt; \&quot;summary\&quot;, 3 -&gt; \&quot;detail\&quot;</value>

        [DataMember(Name="resource_state")]
        public int? ResourceState { get; set; }

        /// <summary>
        /// The athlete&#x27;s first name.
        /// </summary>
        /// <value>The athlete&#x27;s first name.</value>

        [DataMember(Name="firstname")]
        public string Firstname { get; set; }

        /// <summary>
        /// The athlete&#x27;s last name.
        /// </summary>
        /// <value>The athlete&#x27;s last name.</value>

        [DataMember(Name="lastname")]
        public string Lastname { get; set; }

        /// <summary>
        /// URL to a 62x62 pixel profile picture.
        /// </summary>
        /// <value>URL to a 62x62 pixel profile picture.</value>

        [DataMember(Name="profile_medium")]
        public string ProfileMedium { get; set; }

        /// <summary>
        /// URL to a 124x124 pixel profile picture.
        /// </summary>
        /// <value>URL to a 124x124 pixel profile picture.</value>

        [DataMember(Name="profile")]
        public string Profile { get; set; }

        /// <summary>
        /// The athlete&#x27;s city.
        /// </summary>
        /// <value>The athlete&#x27;s city.</value>

        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The athlete&#x27;s state or geographical region.
        /// </summary>
        /// <value>The athlete&#x27;s state or geographical region.</value>

        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// The athlete&#x27;s country.
        /// </summary>
        /// <value>The athlete&#x27;s country.</value>

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// The athlete's sex.
        /// </summary>
        /// <value>The athlete's sex.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SexEnum
        {
            /// <summary>
            /// Enum MEnum for M
            /// </summary>
            [EnumMember(Value = "M")]
            MEnum = 0,
            /// <summary>
            /// Enum FEnum for F
            /// </summary>
            [EnumMember(Value = "F")]
            FEnum = 1        }

        /// <summary>
        /// The athlete&#x27;s sex.
        /// </summary>
        /// <value>The athlete&#x27;s sex.</value>

        [DataMember(Name="sex")]
        public SexEnum? Sex { get; set; }

        /// <summary>
        /// Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
        /// </summary>
        /// <value>Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.</value>

        [DataMember(Name="premium")]
        public bool? Premium { get; set; }

        /// <summary>
        /// Whether the athlete has any Summit subscription.
        /// </summary>
        /// <value>Whether the athlete has any Summit subscription.</value>

        [DataMember(Name="summit")]
        public bool? Summit { get; set; }

        /// <summary>
        /// The time at which the athlete was created.
        /// </summary>
        /// <value>The time at which the athlete was created.</value>

        [DataMember(Name="created_at")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The time at which the athlete was last updated.
        /// </summary>
        /// <value>The time at which the athlete was last updated.</value>

        [DataMember(Name="updated_at")]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryAthlete {\n");
            sb.Append("  ResourceState: ").Append(ResourceState).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  ProfileMedium: ").Append(ProfileMedium).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  Summit: ").Append(Summit).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SummaryAthlete)obj);
        }

        /// <summary>
        /// Returns true if SummaryAthlete instances are equal
        /// </summary>
        /// <param name="other">Instance of SummaryAthlete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryAthlete other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResourceState == other.ResourceState ||
                    ResourceState != null &&
                    ResourceState.Equals(other.ResourceState)
                ) && 
                (
                    Firstname == other.Firstname ||
                    Firstname != null &&
                    Firstname.Equals(other.Firstname)
                ) && 
                (
                    Lastname == other.Lastname ||
                    Lastname != null &&
                    Lastname.Equals(other.Lastname)
                ) && 
                (
                    ProfileMedium == other.ProfileMedium ||
                    ProfileMedium != null &&
                    ProfileMedium.Equals(other.ProfileMedium)
                ) && 
                (
                    Profile == other.Profile ||
                    Profile != null &&
                    Profile.Equals(other.Profile)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    Sex == other.Sex ||
                    Sex != null &&
                    Sex.Equals(other.Sex)
                ) && 
                (
                    Premium == other.Premium ||
                    Premium != null &&
                    Premium.Equals(other.Premium)
                ) && 
                (
                    Summit == other.Summit ||
                    Summit != null &&
                    Summit.Equals(other.Summit)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResourceState != null)
                    hashCode = hashCode * 59 + ResourceState.GetHashCode();
                    if (Firstname != null)
                    hashCode = hashCode * 59 + Firstname.GetHashCode();
                    if (Lastname != null)
                    hashCode = hashCode * 59 + Lastname.GetHashCode();
                    if (ProfileMedium != null)
                    hashCode = hashCode * 59 + ProfileMedium.GetHashCode();
                    if (Profile != null)
                    hashCode = hashCode * 59 + Profile.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (Sex != null)
                    hashCode = hashCode * 59 + Sex.GetHashCode();
                    if (Premium != null)
                    hashCode = hashCode * 59 + Premium.GetHashCode();
                    if (Summit != null)
                    hashCode = hashCode * 59 + Summit.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SummaryAthlete left, SummaryAthlete right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SummaryAthlete left, SummaryAthlete right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
