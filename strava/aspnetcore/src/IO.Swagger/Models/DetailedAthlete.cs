/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DetailedAthlete : SummaryAthlete, IEquatable<DetailedAthlete>
    { 
        /// <summary>
        /// The athlete&#x27;s follower count.
        /// </summary>
        /// <value>The athlete&#x27;s follower count.</value>

        [DataMember(Name="follower_count")]
        public int? FollowerCount { get; set; }

        /// <summary>
        /// The athlete&#x27;s friend count.
        /// </summary>
        /// <value>The athlete&#x27;s friend count.</value>

        [DataMember(Name="friend_count")]
        public int? FriendCount { get; set; }

        /// <summary>
        /// The athlete's preferred unit system.
        /// </summary>
        /// <value>The athlete's preferred unit system.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MeasurementPreferenceEnum
        {
            /// <summary>
            /// Enum FeetEnum for feet
            /// </summary>
            [EnumMember(Value = "feet")]
            FeetEnum = 0,
            /// <summary>
            /// Enum MetersEnum for meters
            /// </summary>
            [EnumMember(Value = "meters")]
            MetersEnum = 1        }

        /// <summary>
        /// The athlete&#x27;s preferred unit system.
        /// </summary>
        /// <value>The athlete&#x27;s preferred unit system.</value>

        [DataMember(Name="measurement_preference")]
        public MeasurementPreferenceEnum? MeasurementPreference { get; set; }

        /// <summary>
        /// The athlete&#x27;s FTP (Functional Threshold Power).
        /// </summary>
        /// <value>The athlete&#x27;s FTP (Functional Threshold Power).</value>

        [DataMember(Name="ftp")]
        public int? Ftp { get; set; }

        /// <summary>
        /// The athlete&#x27;s weight.
        /// </summary>
        /// <value>The athlete&#x27;s weight.</value>

        [DataMember(Name="weight")]
        public float? Weight { get; set; }

        /// <summary>
        /// The athlete&#x27;s clubs.
        /// </summary>
        /// <value>The athlete&#x27;s clubs.</value>

        [DataMember(Name="clubs")]
        public List<SummaryClub> Clubs { get; set; }

        /// <summary>
        /// The athlete&#x27;s bikes.
        /// </summary>
        /// <value>The athlete&#x27;s bikes.</value>

        [DataMember(Name="bikes")]
        public List<SummaryGear> Bikes { get; set; }

        /// <summary>
        /// The athlete&#x27;s shoes.
        /// </summary>
        /// <value>The athlete&#x27;s shoes.</value>

        [DataMember(Name="shoes")]
        public List<SummaryGear> Shoes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedAthlete {\n");
            sb.Append("  FollowerCount: ").Append(FollowerCount).Append("\n");
            sb.Append("  FriendCount: ").Append(FriendCount).Append("\n");
            sb.Append("  MeasurementPreference: ").Append(MeasurementPreference).Append("\n");
            sb.Append("  Ftp: ").Append(Ftp).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Clubs: ").Append(Clubs).Append("\n");
            sb.Append("  Bikes: ").Append(Bikes).Append("\n");
            sb.Append("  Shoes: ").Append(Shoes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DetailedAthlete)obj);
        }

        /// <summary>
        /// Returns true if DetailedAthlete instances are equal
        /// </summary>
        /// <param name="other">Instance of DetailedAthlete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedAthlete other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FollowerCount == other.FollowerCount ||
                    FollowerCount != null &&
                    FollowerCount.Equals(other.FollowerCount)
                ) && 
                (
                    FriendCount == other.FriendCount ||
                    FriendCount != null &&
                    FriendCount.Equals(other.FriendCount)
                ) && 
                (
                    MeasurementPreference == other.MeasurementPreference ||
                    MeasurementPreference != null &&
                    MeasurementPreference.Equals(other.MeasurementPreference)
                ) && 
                (
                    Ftp == other.Ftp ||
                    Ftp != null &&
                    Ftp.Equals(other.Ftp)
                ) && 
                (
                    Weight == other.Weight ||
                    Weight != null &&
                    Weight.Equals(other.Weight)
                ) && 
                (
                    Clubs == other.Clubs ||
                    Clubs != null &&
                    Clubs.SequenceEqual(other.Clubs)
                ) && 
                (
                    Bikes == other.Bikes ||
                    Bikes != null &&
                    Bikes.SequenceEqual(other.Bikes)
                ) && 
                (
                    Shoes == other.Shoes ||
                    Shoes != null &&
                    Shoes.SequenceEqual(other.Shoes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FollowerCount != null)
                    hashCode = hashCode * 59 + FollowerCount.GetHashCode();
                    if (FriendCount != null)
                    hashCode = hashCode * 59 + FriendCount.GetHashCode();
                    if (MeasurementPreference != null)
                    hashCode = hashCode * 59 + MeasurementPreference.GetHashCode();
                    if (Ftp != null)
                    hashCode = hashCode * 59 + Ftp.GetHashCode();
                    if (Weight != null)
                    hashCode = hashCode * 59 + Weight.GetHashCode();
                    if (Clubs != null)
                    hashCode = hashCode * 59 + Clubs.GetHashCode();
                    if (Bikes != null)
                    hashCode = hashCode * 59 + Bikes.GetHashCode();
                    if (Shoes != null)
                    hashCode = hashCode * 59 + Shoes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DetailedAthlete left, DetailedAthlete right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DetailedAthlete left, DetailedAthlete right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
