/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SummarySegment : IEquatable<SummarySegment>
    { 
        /// <summary>
        /// The unique identifier of this segment
        /// </summary>
        /// <value>The unique identifier of this segment</value>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// The name of this segment
        /// </summary>
        /// <value>The name of this segment</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ActivityType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ActivityTypeEnum
        {
            /// <summary>
            /// Enum RideEnum for Ride
            /// </summary>
            [EnumMember(Value = "Ride")]
            RideEnum = 0,
            /// <summary>
            /// Enum RunEnum for Run
            /// </summary>
            [EnumMember(Value = "Run")]
            RunEnum = 1        }

        /// <summary>
        /// Gets or Sets ActivityType
        /// </summary>

        [DataMember(Name="activity_type")]
        public ActivityTypeEnum? ActivityType { get; set; }

        /// <summary>
        /// The segment&#x27;s distance, in meters
        /// </summary>
        /// <value>The segment&#x27;s distance, in meters</value>

        [DataMember(Name="distance")]
        public float? Distance { get; set; }

        /// <summary>
        /// The segment&#x27;s average grade, in percents
        /// </summary>
        /// <value>The segment&#x27;s average grade, in percents</value>

        [DataMember(Name="average_grade")]
        public float? AverageGrade { get; set; }

        /// <summary>
        /// The segments&#x27;s maximum grade, in percents
        /// </summary>
        /// <value>The segments&#x27;s maximum grade, in percents</value>

        [DataMember(Name="maximum_grade")]
        public float? MaximumGrade { get; set; }

        /// <summary>
        /// The segments&#x27;s highest elevation, in meters
        /// </summary>
        /// <value>The segments&#x27;s highest elevation, in meters</value>

        [DataMember(Name="elevation_high")]
        public float? ElevationHigh { get; set; }

        /// <summary>
        /// The segments&#x27;s lowest elevation, in meters
        /// </summary>
        /// <value>The segments&#x27;s lowest elevation, in meters</value>

        [DataMember(Name="elevation_low")]
        public float? ElevationLow { get; set; }

        /// <summary>
        /// Gets or Sets StartLatlng
        /// </summary>

        [DataMember(Name="start_latlng")]
        public LatLng StartLatlng { get; set; }

        /// <summary>
        /// Gets or Sets EndLatlng
        /// </summary>

        [DataMember(Name="end_latlng")]
        public LatLng EndLatlng { get; set; }

        /// <summary>
        /// The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
        /// </summary>
        /// <value>The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.</value>

        [DataMember(Name="climb_category")]
        public int? ClimbCategory { get; set; }

        /// <summary>
        /// The segments&#x27;s city.
        /// </summary>
        /// <value>The segments&#x27;s city.</value>

        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The segments&#x27;s state or geographical region.
        /// </summary>
        /// <value>The segments&#x27;s state or geographical region.</value>

        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// The segment&#x27;s country.
        /// </summary>
        /// <value>The segment&#x27;s country.</value>

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Whether this segment is private.
        /// </summary>
        /// <value>Whether this segment is private.</value>

        [DataMember(Name="private")]
        public bool? _Private { get; set; }

        /// <summary>
        /// Gets or Sets AthletePrEffort
        /// </summary>

        [DataMember(Name="athlete_pr_effort")]
        public SummarySegmentEffort AthletePrEffort { get; set; }

        /// <summary>
        /// Gets or Sets AthleteSegmentStats
        /// </summary>

        [DataMember(Name="athlete_segment_stats")]
        public SummaryPRSegmentEffort AthleteSegmentStats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummarySegment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  AverageGrade: ").Append(AverageGrade).Append("\n");
            sb.Append("  MaximumGrade: ").Append(MaximumGrade).Append("\n");
            sb.Append("  ElevationHigh: ").Append(ElevationHigh).Append("\n");
            sb.Append("  ElevationLow: ").Append(ElevationLow).Append("\n");
            sb.Append("  StartLatlng: ").Append(StartLatlng).Append("\n");
            sb.Append("  EndLatlng: ").Append(EndLatlng).Append("\n");
            sb.Append("  ClimbCategory: ").Append(ClimbCategory).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  _Private: ").Append(_Private).Append("\n");
            sb.Append("  AthletePrEffort: ").Append(AthletePrEffort).Append("\n");
            sb.Append("  AthleteSegmentStats: ").Append(AthleteSegmentStats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SummarySegment)obj);
        }

        /// <summary>
        /// Returns true if SummarySegment instances are equal
        /// </summary>
        /// <param name="other">Instance of SummarySegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummarySegment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ActivityType == other.ActivityType ||
                    ActivityType != null &&
                    ActivityType.Equals(other.ActivityType)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    AverageGrade == other.AverageGrade ||
                    AverageGrade != null &&
                    AverageGrade.Equals(other.AverageGrade)
                ) && 
                (
                    MaximumGrade == other.MaximumGrade ||
                    MaximumGrade != null &&
                    MaximumGrade.Equals(other.MaximumGrade)
                ) && 
                (
                    ElevationHigh == other.ElevationHigh ||
                    ElevationHigh != null &&
                    ElevationHigh.Equals(other.ElevationHigh)
                ) && 
                (
                    ElevationLow == other.ElevationLow ||
                    ElevationLow != null &&
                    ElevationLow.Equals(other.ElevationLow)
                ) && 
                (
                    StartLatlng == other.StartLatlng ||
                    StartLatlng != null &&
                    StartLatlng.Equals(other.StartLatlng)
                ) && 
                (
                    EndLatlng == other.EndLatlng ||
                    EndLatlng != null &&
                    EndLatlng.Equals(other.EndLatlng)
                ) && 
                (
                    ClimbCategory == other.ClimbCategory ||
                    ClimbCategory != null &&
                    ClimbCategory.Equals(other.ClimbCategory)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    _Private == other._Private ||
                    _Private != null &&
                    _Private.Equals(other._Private)
                ) && 
                (
                    AthletePrEffort == other.AthletePrEffort ||
                    AthletePrEffort != null &&
                    AthletePrEffort.Equals(other.AthletePrEffort)
                ) && 
                (
                    AthleteSegmentStats == other.AthleteSegmentStats ||
                    AthleteSegmentStats != null &&
                    AthleteSegmentStats.Equals(other.AthleteSegmentStats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ActivityType != null)
                    hashCode = hashCode * 59 + ActivityType.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (AverageGrade != null)
                    hashCode = hashCode * 59 + AverageGrade.GetHashCode();
                    if (MaximumGrade != null)
                    hashCode = hashCode * 59 + MaximumGrade.GetHashCode();
                    if (ElevationHigh != null)
                    hashCode = hashCode * 59 + ElevationHigh.GetHashCode();
                    if (ElevationLow != null)
                    hashCode = hashCode * 59 + ElevationLow.GetHashCode();
                    if (StartLatlng != null)
                    hashCode = hashCode * 59 + StartLatlng.GetHashCode();
                    if (EndLatlng != null)
                    hashCode = hashCode * 59 + EndLatlng.GetHashCode();
                    if (ClimbCategory != null)
                    hashCode = hashCode * 59 + ClimbCategory.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (_Private != null)
                    hashCode = hashCode * 59 + _Private.GetHashCode();
                    if (AthletePrEffort != null)
                    hashCode = hashCode * 59 + AthletePrEffort.GetHashCode();
                    if (AthleteSegmentStats != null)
                    hashCode = hashCode * 59 + AthleteSegmentStats.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SummarySegment left, SummarySegment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SummarySegment left, SummarySegment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
