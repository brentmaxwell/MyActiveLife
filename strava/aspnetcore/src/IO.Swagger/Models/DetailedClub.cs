/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DetailedClub : SummaryClub, IEquatable<DetailedClub>
    { 
        /// <summary>
        /// The membership status of the logged-in athlete.
        /// </summary>
        /// <value>The membership status of the logged-in athlete.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MembershipEnum
        {
            /// <summary>
            /// Enum MemberEnum for member
            /// </summary>
            [EnumMember(Value = "member")]
            MemberEnum = 0,
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = "pending")]
            PendingEnum = 1        }

        /// <summary>
        /// The membership status of the logged-in athlete.
        /// </summary>
        /// <value>The membership status of the logged-in athlete.</value>

        [DataMember(Name="membership")]
        public MembershipEnum? Membership { get; set; }

        /// <summary>
        /// Whether the currently logged-in athlete is an administrator of this club.
        /// </summary>
        /// <value>Whether the currently logged-in athlete is an administrator of this club.</value>

        [DataMember(Name="admin")]
        public bool? Admin { get; set; }

        /// <summary>
        /// Whether the currently logged-in athlete is the owner of this club.
        /// </summary>
        /// <value>Whether the currently logged-in athlete is the owner of this club.</value>

        [DataMember(Name="owner")]
        public bool? Owner { get; set; }

        /// <summary>
        /// The number of athletes in the club that the logged-in athlete follows.
        /// </summary>
        /// <value>The number of athletes in the club that the logged-in athlete follows.</value>

        [DataMember(Name="following_count")]
        public int? FollowingCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedClub {\n");
            sb.Append("  Membership: ").Append(Membership).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DetailedClub)obj);
        }

        /// <summary>
        /// Returns true if DetailedClub instances are equal
        /// </summary>
        /// <param name="other">Instance of DetailedClub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedClub other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Membership == other.Membership ||
                    Membership != null &&
                    Membership.Equals(other.Membership)
                ) && 
                (
                    Admin == other.Admin ||
                    Admin != null &&
                    Admin.Equals(other.Admin)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    FollowingCount == other.FollowingCount ||
                    FollowingCount != null &&
                    FollowingCount.Equals(other.FollowingCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Membership != null)
                    hashCode = hashCode * 59 + Membership.GetHashCode();
                    if (Admin != null)
                    hashCode = hashCode * 59 + Admin.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (FollowingCount != null)
                    hashCode = hashCode * 59 + FollowingCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DetailedClub left, DetailedClub right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DetailedClub left, DetailedClub right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
