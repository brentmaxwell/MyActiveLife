/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StreamsApiController : ControllerBase
    { 
        /// <summary>
        /// Get Activity Streams
        /// </summary>
        /// <remarks>Returns the given activity&#x27;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.</remarks>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="keys">Desired stream types.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <response code="200">The set of requested streams.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/activities/{id}/streams")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityStreams")]
        [SwaggerResponse(statusCode: 200, type: typeof(StreamSet), description: "The set of requested streams.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetActivityStreams([FromRoute][Required]long? id, [FromQuery][Required()]List<string> keys, [FromQuery][Required()]bool? keyByType)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StreamSet));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "{\n  \"altitude\" : \"\",\n  \"temp\" : \"\",\n  \"velocity_smooth\" : \"\",\n  \"watts\" : \"\",\n  \"distance\" : \"\",\n  \"heartrate\" : \"\",\n  \"time\" : \"\",\n  \"moving\" : \"\",\n  \"latlng\" : \"\",\n  \"cadence\" : \"\",\n  \"grade_smooth\" : \"\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StreamSet>(exampleJson)
                        : default(StreamSet);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Route Streams
        /// </summary>
        /// <remarks>Returns the given route&#x27;s streams. Requires read_all scope for private routes.</remarks>
        /// <param name="id">The identifier of the route.</param>
        /// <response code="200">The set of requested streams.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/routes/{id}/streams")]
        [ValidateModelState]
        [SwaggerOperation("GetRouteStreams")]
        [SwaggerResponse(statusCode: 200, type: typeof(StreamSet), description: "The set of requested streams.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetRouteStreams([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StreamSet));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "{\n  \"altitude\" : \"\",\n  \"temp\" : \"\",\n  \"velocity_smooth\" : \"\",\n  \"watts\" : \"\",\n  \"distance\" : \"\",\n  \"heartrate\" : \"\",\n  \"time\" : \"\",\n  \"moving\" : \"\",\n  \"latlng\" : \"\",\n  \"cadence\" : \"\",\n  \"grade_smooth\" : \"\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StreamSet>(exampleJson)
                        : default(StreamSet);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Segment Effort Streams
        /// </summary>
        /// <remarks>Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.</remarks>
        /// <param name="id">The identifier of the segment effort.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <response code="200">The set of requested streams.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/segment_efforts/{id}/streams")]
        [ValidateModelState]
        [SwaggerOperation("GetSegmentEffortStreams")]
        [SwaggerResponse(statusCode: 200, type: typeof(StreamSet), description: "The set of requested streams.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetSegmentEffortStreams([FromRoute][Required]long? id, [FromQuery][Required()]List<string> keys, [FromQuery][Required()]bool? keyByType)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StreamSet));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "{\n  \"altitude\" : \"\",\n  \"temp\" : \"\",\n  \"velocity_smooth\" : \"\",\n  \"watts\" : \"\",\n  \"distance\" : \"\",\n  \"heartrate\" : \"\",\n  \"time\" : \"\",\n  \"moving\" : \"\",\n  \"latlng\" : \"\",\n  \"cadence\" : \"\",\n  \"grade_smooth\" : \"\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StreamSet>(exampleJson)
                        : default(StreamSet);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Segment Streams
        /// </summary>
        /// <remarks>Returns the given segment&#x27;s streams. Requires read_all scope for private segments.</remarks>
        /// <param name="id">The identifier of the segment.</param>
        /// <param name="keys">The types of streams to return.</param>
        /// <param name="keyByType">Must be true.</param>
        /// <response code="200">The set of requested streams.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/segments/{id}/streams")]
        [ValidateModelState]
        [SwaggerOperation("GetSegmentStreams")]
        [SwaggerResponse(statusCode: 200, type: typeof(StreamSet), description: "The set of requested streams.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetSegmentStreams([FromRoute][Required]long? id, [FromQuery][Required()]List<string> keys, [FromQuery][Required()]bool? keyByType)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StreamSet));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "{\n  \"altitude\" : \"\",\n  \"temp\" : \"\",\n  \"velocity_smooth\" : \"\",\n  \"watts\" : \"\",\n  \"distance\" : \"\",\n  \"heartrate\" : \"\",\n  \"time\" : \"\",\n  \"moving\" : \"\",\n  \"latlng\" : \"\",\n  \"cadence\" : \"\",\n  \"grade_smooth\" : \"\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StreamSet>(exampleJson)
                        : default(StreamSet);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
