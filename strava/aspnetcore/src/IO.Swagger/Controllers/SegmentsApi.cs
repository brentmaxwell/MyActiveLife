/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SegmentsApiController : ControllerBase
    { 
        /// <summary>
        /// Explore segments
        /// </summary>
        /// <remarks>Returns the top 10 segments matching a specified query.</remarks>
        /// <param name="bounds">The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]</param>
        /// <param name="activityType">Desired activity type.</param>
        /// <param name="minCat">The minimum climbing category.</param>
        /// <param name="maxCat">The maximum climbing category.</param>
        /// <response code="200">List of matching segments.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/segments/explore")]
        [ValidateModelState]
        [SwaggerOperation("ExploreSegments")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExplorerResponse), description: "List of matching segments.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult ExploreSegments([FromQuery][Required()]List<float?> bounds, [FromQuery]string activityType, [FromQuery][Range(0, 5)]int? minCat, [FromQuery][Range(0, 5)]int? maxCat)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ExplorerResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "{\n  \"segments\" : [ {\n    \"distance\" : 2.302136,\n    \"climb_category\" : 3,\n    \"climb_category_desc\" : \"NC\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"elev_difference\" : 5.637377,\n    \"avg_grade\" : 1.4658129,\n    \"start_latlng\" : [ 5.962134, 5.962134 ],\n    \"points\" : \"points\"\n  }, {\n    \"distance\" : 2.302136,\n    \"climb_category\" : 3,\n    \"climb_category_desc\" : \"NC\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"elev_difference\" : 5.637377,\n    \"avg_grade\" : 1.4658129,\n    \"start_latlng\" : [ 5.962134, 5.962134 ],\n    \"points\" : \"points\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ExplorerResponse>(exampleJson)
                        : default(ExplorerResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Starred Segments
        /// </summary>
        /// <remarks>List of the authenticated athlete&#x27;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.</remarks>
        /// <param name="page">Page number. Defaults to 1.</param>
        /// <param name="perPage">Number of items per page. Defaults to 30.</param>
        /// <response code="200">List of the authenticated athlete&#x27;s starred segments.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/segments/starred")]
        [ValidateModelState]
        [SwaggerOperation("GetLoggedInAthleteStarredSegments")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SummarySegment>), description: "List of the authenticated athlete&#x27;s starred segments.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetLoggedInAthleteStarredSegments([FromQuery]int? page, [FromQuery]int? perPage)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SummarySegment>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "[ {\n  \"country\" : \"country\",\n  \"private\" : true,\n  \"distance\" : 6.0274563,\n  \"average_grade\" : 1.4658129,\n  \"maximum_grade\" : 5.962134,\n  \"climb_category\" : 9,\n  \"city\" : \"city\",\n  \"elevation_high\" : 5.637377,\n  \"athlete_pr_effort\" : {\n    \"distance\" : 7.386282,\n    \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"activity_id\" : 2,\n    \"elapsed_time\" : 4,\n    \"is_kom\" : true,\n    \"id\" : 3,\n    \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"athlete_segment_stats\" : {\n    \"pr_elapsed_time\" : 1,\n    \"pr_date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"effort_count\" : 1,\n    \"pr_activity_id\" : 1\n  },\n  \"start_latlng\" : [ 7.0614014, 7.0614014 ],\n  \"elevation_low\" : 2.302136,\n  \"activity_type\" : \"Ride\",\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"state\" : \"state\"\n}, {\n  \"country\" : \"country\",\n  \"private\" : true,\n  \"distance\" : 6.0274563,\n  \"average_grade\" : 1.4658129,\n  \"maximum_grade\" : 5.962134,\n  \"climb_category\" : 9,\n  \"city\" : \"city\",\n  \"elevation_high\" : 5.637377,\n  \"athlete_pr_effort\" : {\n    \"distance\" : 7.386282,\n    \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"activity_id\" : 2,\n    \"elapsed_time\" : 4,\n    \"is_kom\" : true,\n    \"id\" : 3,\n    \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"athlete_segment_stats\" : {\n    \"pr_elapsed_time\" : 1,\n    \"pr_date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"effort_count\" : 1,\n    \"pr_activity_id\" : 1\n  },\n  \"start_latlng\" : [ 7.0614014, 7.0614014 ],\n  \"elevation_low\" : 2.302136,\n  \"activity_type\" : \"Ride\",\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"state\" : \"state\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SummarySegment>>(exampleJson)
                        : default(List<SummarySegment>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Segment
        /// </summary>
        /// <remarks>Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.</remarks>
        /// <param name="id">The identifier of the segment.</param>
        /// <response code="200">Representation of a segment.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/segments/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetSegmentById")]
        [SwaggerResponse(statusCode: 200, type: typeof(DetailedSegment), description: "Representation of a segment.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetSegmentById([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DetailedSegment));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DetailedSegment>(exampleJson)
                        : default(DetailedSegment);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

    }
}
