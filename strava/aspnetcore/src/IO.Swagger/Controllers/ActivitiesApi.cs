/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ActivitiesApiController : ControllerBase
    { 

        /// <summary>
        /// Get Activity
        /// </summary>
        /// <remarks>Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.</remarks>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="includeAllEfforts">To include all segments efforts.</param>
        /// <response code="200">The activity&#x27;s detailed representation.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/activities/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityById")]
        [SwaggerResponse(statusCode: 200, type: typeof(DetailedActivity), description: "The activity&#x27;s detailed representation.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetActivityById([FromRoute][Required]long? id, [FromQuery]bool? includeAllEfforts)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DetailedActivity));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DetailedActivity>(exampleJson)
                        : default(DetailedActivity);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Activity Comments
        /// </summary>
        /// <remarks>Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.</remarks>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. Defaults to 1.</param>
        /// <param name="perPage">Number of items per page. Defaults to 30.</param>
        /// <response code="200">Comments.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/activities/{id}/comments")]
        [ValidateModelState]
        [SwaggerOperation("GetCommentsByActivityId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Comment>), description: "Comments.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetCommentsByActivityId([FromRoute][Required]long? id, [FromQuery]int? page, [FromQuery]int? perPage)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Comment>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "[ {\n  \"athlete\" : \"\",\n  \"activity_id\" : 6,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : 0,\n  \"text\" : \"text\"\n}, {\n  \"athlete\" : \"\",\n  \"activity_id\" : 6,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : 0,\n  \"text\" : \"text\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Comment>>(exampleJson)
                        : default(List<Comment>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Activity Kudoers
        /// </summary>
        /// <remarks>Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.</remarks>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="page">Page number. Defaults to 1.</param>
        /// <param name="perPage">Number of items per page. Defaults to 30.</param>
        /// <response code="200">Comments.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/activities/{id}/kudos")]
        [ValidateModelState]
        [SwaggerOperation("GetKudoersByActivityId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SummaryAthlete>), description: "Comments.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetKudoersByActivityId([FromRoute][Required]long? id, [FromQuery]int? page, [FromQuery]int? perPage)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SummaryAthlete>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SummaryAthlete>>(exampleJson)
                        : default(List<SummaryAthlete>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Activity Laps
        /// </summary>
        /// <remarks>Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.</remarks>
        /// <param name="id">The identifier of the activity.</param>
        /// <response code="200">Activity Laps.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/activities/{id}/laps")]
        [ValidateModelState]
        [SwaggerOperation("GetLapsByActivityId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Lap>), description: "Activity Laps.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetLapsByActivityId([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Lap>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "[ {\n  \"pace_zone\" : 1,\n  \"average_cadence\" : 5.962134,\n  \"activity\" : {\n    \"id\" : 6\n  },\n  \"distance\" : 2.302136,\n  \"athlete\" : {\n    \"id\" : 1\n  },\n  \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"end_index\" : 3,\n  \"max_speed\" : 4.145608,\n  \"lap_index\" : 2,\n  \"total_elevation_gain\" : 1.4894159,\n  \"split\" : 1,\n  \"start_index\" : 9,\n  \"elapsed_time\" : 7,\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"average_speed\" : 5.637377,\n  \"moving_time\" : 7,\n  \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n}, {\n  \"pace_zone\" : 1,\n  \"average_cadence\" : 5.962134,\n  \"activity\" : {\n    \"id\" : 6\n  },\n  \"distance\" : 2.302136,\n  \"athlete\" : {\n    \"id\" : 1\n  },\n  \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"end_index\" : 3,\n  \"max_speed\" : 4.145608,\n  \"lap_index\" : 2,\n  \"total_elevation_gain\" : 1.4894159,\n  \"split\" : 1,\n  \"start_index\" : 9,\n  \"elapsed_time\" : 7,\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"average_speed\" : 5.637377,\n  \"moving_time\" : 7,\n  \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Lap>>(exampleJson)
                        : default(List<Lap>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Athlete Activities
        /// </summary>
        /// <remarks>Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.</remarks>
        /// <param name="before">An epoch timestamp to use for filtering activities that have taken place before a certain time.</param>
        /// <param name="after">An epoch timestamp to use for filtering activities that have taken place after a certain time.</param>
        /// <param name="page">Page number. Defaults to 1.</param>
        /// <param name="perPage">Number of items per page. Defaults to 30.</param>
        /// <response code="200">The authenticated athlete&#x27;s activities</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/athlete/activities")]
        [ValidateModelState]
        [SwaggerOperation("GetLoggedInAthleteActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SummaryActivity>), description: "The authenticated athlete&#x27;s activities")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetLoggedInAthleteActivities([FromQuery]int? before, [FromQuery]int? after, [FromQuery]int? page, [FromQuery]int? perPage)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SummaryActivity>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SummaryActivity>>(exampleJson)
                        : default(List<SummaryActivity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Activity Zones
        /// </summary>
        /// <remarks>Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.</remarks>
        /// <param name="id">The identifier of the activity.</param>
        /// <response code="200">Activity Zones.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/activities/{id}/zones")]
        [ValidateModelState]
        [SwaggerOperation("GetZonesByActivityId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ActivityZone>), description: "Activity Zones.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetZonesByActivityId([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ActivityZone>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "[ {\n  \"score\" : 0,\n  \"sensor_based\" : true,\n  \"custom_zones\" : true,\n  \"max\" : 1,\n  \"distribution_buckets\" : [ \"\", \"\" ],\n  \"type\" : \"heartrate\",\n  \"points\" : 6\n}, {\n  \"score\" : 0,\n  \"sensor_based\" : true,\n  \"custom_zones\" : true,\n  \"max\" : 1,\n  \"distribution_buckets\" : [ \"\", \"\" ],\n  \"type\" : \"heartrate\",\n  \"points\" : 6\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ActivityZone>>(exampleJson)
                        : default(List<ActivityZone>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Activity
        /// </summary>
        /// <remarks>Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities</remarks>
        /// <param name="id">The identifier of the activity.</param>
        /// <param name="body"></param>
        /// <response code="200">The activity&#x27;s detailed representation.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPut]
        [Route("/api/v3/activities/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateActivityById")]
        [SwaggerResponse(statusCode: 200, type: typeof(DetailedActivity), description: "The activity&#x27;s detailed representation.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult UpdateActivityById([FromRoute][Required]long? id, [FromBody]UpdatableActivity body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DetailedActivity));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DetailedActivity>(exampleJson)
                        : default(DetailedActivity);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
