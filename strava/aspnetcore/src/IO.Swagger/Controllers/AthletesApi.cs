/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AthletesApiController : ControllerBase
    { 
        /// <summary>
        /// Get Authenticated Athlete
        /// </summary>
        /// <remarks>Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.</remarks>
        /// <response code="200">Profile information for the authenticated athlete.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/athlete")]
        [ValidateModelState]
        [SwaggerOperation("GetLoggedInAthlete")]
        [SwaggerResponse(statusCode: 200, type: typeof(DetailedAthlete), description: "Profile information for the authenticated athlete.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetLoggedInAthlete()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DetailedAthlete));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DetailedAthlete>(exampleJson)
                        : default(DetailedAthlete);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Zones
        /// </summary>
        /// <remarks>Returns the the authenticated athlete&#x27;s heart rate and power zones. Requires profile:read_all.</remarks>
        /// <response code="200">Heart rate and power zones.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/athlete/zones")]
        [ValidateModelState]
        [SwaggerOperation("GetLoggedInAthleteZones")]
        [SwaggerResponse(statusCode: 200, type: typeof(Zones), description: "Heart rate and power zones.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetLoggedInAthleteZones()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Zones));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "{\n  \"heart_rate\" : {\n    \"custom_zones\" : true,\n    \"zones\" : [ {\n      \"min\" : 0,\n      \"max\" : 6\n    }, {\n      \"min\" : 0,\n      \"max\" : 6\n    } ]\n  },\n  \"power\" : { }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Zones>(exampleJson)
                        : default(Zones);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Athlete Stats
        /// </summary>
        /// <remarks>Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.</remarks>
        /// <param name="id">The identifier of the athlete. Must match the authenticated athlete.</param>
        /// <response code="200">Activity stats of the athlete.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/athletes/{id}/stats")]
        [ValidateModelState]
        [SwaggerOperation("GetStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActivityStats), description: "Activity stats of the athlete.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetStats([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ActivityStats));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "{\n  \"biggest_ride_distance\" : 0.8008281904610115,\n  \"recent_ride_totals\" : {\n    \"distance\" : 5.962134,\n    \"achievement_count\" : 9,\n    \"count\" : 1,\n    \"elapsed_time\" : 2,\n    \"elevation_gain\" : 7.0614014,\n    \"moving_time\" : 5\n  },\n  \"biggest_climb_elevation_gain\" : 6.027456183070403\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ActivityStats>(exampleJson)
                        : default(ActivityStats);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Athlete
        /// </summary>
        /// <remarks>Update the currently authenticated athlete. Requires profile:write scope.</remarks>
        /// <param name="weight">The weight of the athlete in kilograms.</param>
        /// <response code="200">Profile information for the authenticated athlete.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPut]
        [Route("/api/v3/athlete")]
        [ValidateModelState]
        [SwaggerOperation("UpdateLoggedInAthlete")]
        [SwaggerResponse(statusCode: 200, type: typeof(DetailedAthlete), description: "Profile information for the authenticated athlete.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult UpdateLoggedInAthlete([FromRoute][Required]float? weight)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DetailedAthlete));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DetailedAthlete>(exampleJson)
                        : default(DetailedAthlete);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
