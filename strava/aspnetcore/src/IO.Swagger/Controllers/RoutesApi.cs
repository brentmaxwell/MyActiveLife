/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RoutesApiController : ControllerBase
    { 
        /// <summary>
        /// Export Route GPX
        /// </summary>
        /// <remarks>Returns a GPX file of the route. Requires read_all scope for private routes.</remarks>
        /// <param name="id">The identifier of the route.</param>
        /// <response code="200">A GPX file with the route.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/routes/{id}/export_gpx")]
        [ValidateModelState]
        [SwaggerOperation("GetRouteAsGPX")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetRouteAsGPX([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Export Route TCX
        /// </summary>
        /// <remarks>Returns a TCX file of the route. Requires read_all scope for private routes.</remarks>
        /// <param name="id">The identifier of the route.</param>
        /// <response code="200">A TCX file with the route.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/routes/{id}/export_tcx")]
        [ValidateModelState]
        [SwaggerOperation("GetRouteAsTCX")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetRouteAsTCX([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Route
        /// </summary>
        /// <remarks>Returns a route using its identifier. Requires read_all scope for private routes.</remarks>
        /// <param name="id">The identifier of the route.</param>
        /// <response code="200">A representation of the route.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/routes/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetRouteById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Route), description: "A representation of the route.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetRouteById([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Route));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "{\n  \"private\" : true,\n  \"distance\" : 0.8008282,\n  \"athlete\" : \"\",\n  \"description\" : \"description\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"elevation_gain\" : 6.0274563,\n  \"type\" : 5,\n  \"estimated_moving_time\" : 7,\n  \"segments\" : [ {\n    \"country\" : \"country\",\n    \"private\" : true,\n    \"distance\" : 6.0274563,\n    \"average_grade\" : 1.4658129,\n    \"maximum_grade\" : 5.962134,\n    \"climb_category\" : 9,\n    \"city\" : \"city\",\n    \"elevation_high\" : 5.637377,\n    \"athlete_pr_effort\" : {\n      \"distance\" : 7.386282,\n      \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"activity_id\" : 2,\n      \"elapsed_time\" : 4,\n      \"is_kom\" : true,\n      \"id\" : 3,\n      \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"athlete_segment_stats\" : {\n      \"pr_elapsed_time\" : 1,\n      \"pr_date\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"effort_count\" : 1,\n      \"pr_activity_id\" : 1\n    },\n    \"start_latlng\" : [ 7.0614014, 7.0614014 ],\n    \"elevation_low\" : 2.302136,\n    \"activity_type\" : \"Ride\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"state\" : \"state\"\n  }, {\n    \"country\" : \"country\",\n    \"private\" : true,\n    \"distance\" : 6.0274563,\n    \"average_grade\" : 1.4658129,\n    \"maximum_grade\" : 5.962134,\n    \"climb_category\" : 9,\n    \"city\" : \"city\",\n    \"elevation_high\" : 5.637377,\n    \"athlete_pr_effort\" : {\n      \"distance\" : 7.386282,\n      \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"activity_id\" : 2,\n      \"elapsed_time\" : 4,\n      \"is_kom\" : true,\n      \"id\" : 3,\n      \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"athlete_segment_stats\" : {\n      \"pr_elapsed_time\" : 1,\n      \"pr_date\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"effort_count\" : 1,\n      \"pr_activity_id\" : 1\n    },\n    \"start_latlng\" : [ 7.0614014, 7.0614014 ],\n    \"elevation_low\" : 2.302136,\n    \"activity_type\" : \"Ride\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"state\" : \"state\"\n  } ],\n  \"starred\" : true,\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sub_type\" : 2,\n  \"id_str\" : \"id_str\",\n  \"name\" : \"name\",\n  \"id\" : 1,\n  \"map\" : {\n    \"summary_polyline\" : \"summary_polyline\",\n    \"id\" : \"id\",\n    \"polyline\" : \"polyline\"\n  },\n  \"timestamp\" : 5\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Route>(exampleJson)
                        : default(Route);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Athlete Routes
        /// </summary>
        /// <remarks>Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.</remarks>
        /// <param name="page">Page number. Defaults to 1.</param>
        /// <param name="perPage">Number of items per page. Defaults to 30.</param>
        /// <response code="200">A representation of the route.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/api/v3/athletes/{id}/routes")]
        [ValidateModelState]
        [SwaggerOperation("GetRoutesByAthleteId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Route>), description: "A representation of the route.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Fault), description: "Unexpected error.")]
        public virtual IActionResult GetRoutesByAthleteId([FromQuery]int? page, [FromQuery]int? perPage)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Route>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Fault));
            string exampleJson = null;
            exampleJson = "[ {\n  \"private\" : true,\n  \"distance\" : 0.8008282,\n  \"athlete\" : \"\",\n  \"description\" : \"description\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"elevation_gain\" : 6.0274563,\n  \"type\" : 5,\n  \"estimated_moving_time\" : 7,\n  \"segments\" : [ {\n    \"country\" : \"country\",\n    \"private\" : true,\n    \"distance\" : 6.0274563,\n    \"average_grade\" : 1.4658129,\n    \"maximum_grade\" : 5.962134,\n    \"climb_category\" : 9,\n    \"city\" : \"city\",\n    \"elevation_high\" : 5.637377,\n    \"athlete_pr_effort\" : {\n      \"distance\" : 7.386282,\n      \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"activity_id\" : 2,\n      \"elapsed_time\" : 4,\n      \"is_kom\" : true,\n      \"id\" : 3,\n      \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"athlete_segment_stats\" : {\n      \"pr_elapsed_time\" : 1,\n      \"pr_date\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"effort_count\" : 1,\n      \"pr_activity_id\" : 1\n    },\n    \"start_latlng\" : [ 7.0614014, 7.0614014 ],\n    \"elevation_low\" : 2.302136,\n    \"activity_type\" : \"Ride\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"state\" : \"state\"\n  }, {\n    \"country\" : \"country\",\n    \"private\" : true,\n    \"distance\" : 6.0274563,\n    \"average_grade\" : 1.4658129,\n    \"maximum_grade\" : 5.962134,\n    \"climb_category\" : 9,\n    \"city\" : \"city\",\n    \"elevation_high\" : 5.637377,\n    \"athlete_pr_effort\" : {\n      \"distance\" : 7.386282,\n      \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"activity_id\" : 2,\n      \"elapsed_time\" : 4,\n      \"is_kom\" : true,\n      \"id\" : 3,\n      \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"athlete_segment_stats\" : {\n      \"pr_elapsed_time\" : 1,\n      \"pr_date\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"effort_count\" : 1,\n      \"pr_activity_id\" : 1\n    },\n    \"start_latlng\" : [ 7.0614014, 7.0614014 ],\n    \"elevation_low\" : 2.302136,\n    \"activity_type\" : \"Ride\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"state\" : \"state\"\n  } ],\n  \"starred\" : true,\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sub_type\" : 2,\n  \"id_str\" : \"id_str\",\n  \"name\" : \"name\",\n  \"id\" : 1,\n  \"map\" : {\n    \"summary_polyline\" : \"summary_polyline\",\n    \"id\" : \"id\",\n    \"polyline\" : \"polyline\"\n  },\n  \"timestamp\" : 5\n}, {\n  \"private\" : true,\n  \"distance\" : 0.8008282,\n  \"athlete\" : \"\",\n  \"description\" : \"description\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"elevation_gain\" : 6.0274563,\n  \"type\" : 5,\n  \"estimated_moving_time\" : 7,\n  \"segments\" : [ {\n    \"country\" : \"country\",\n    \"private\" : true,\n    \"distance\" : 6.0274563,\n    \"average_grade\" : 1.4658129,\n    \"maximum_grade\" : 5.962134,\n    \"climb_category\" : 9,\n    \"city\" : \"city\",\n    \"elevation_high\" : 5.637377,\n    \"athlete_pr_effort\" : {\n      \"distance\" : 7.386282,\n      \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"activity_id\" : 2,\n      \"elapsed_time\" : 4,\n      \"is_kom\" : true,\n      \"id\" : 3,\n      \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"athlete_segment_stats\" : {\n      \"pr_elapsed_time\" : 1,\n      \"pr_date\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"effort_count\" : 1,\n      \"pr_activity_id\" : 1\n    },\n    \"start_latlng\" : [ 7.0614014, 7.0614014 ],\n    \"elevation_low\" : 2.302136,\n    \"activity_type\" : \"Ride\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"state\" : \"state\"\n  }, {\n    \"country\" : \"country\",\n    \"private\" : true,\n    \"distance\" : 6.0274563,\n    \"average_grade\" : 1.4658129,\n    \"maximum_grade\" : 5.962134,\n    \"climb_category\" : 9,\n    \"city\" : \"city\",\n    \"elevation_high\" : 5.637377,\n    \"athlete_pr_effort\" : {\n      \"distance\" : 7.386282,\n      \"start_date_local\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"activity_id\" : 2,\n      \"elapsed_time\" : 4,\n      \"is_kom\" : true,\n      \"id\" : 3,\n      \"start_date\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"athlete_segment_stats\" : {\n      \"pr_elapsed_time\" : 1,\n      \"pr_date\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"effort_count\" : 1,\n      \"pr_activity_id\" : 1\n    },\n    \"start_latlng\" : [ 7.0614014, 7.0614014 ],\n    \"elevation_low\" : 2.302136,\n    \"activity_type\" : \"Ride\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"state\" : \"state\"\n  } ],\n  \"starred\" : true,\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sub_type\" : 2,\n  \"id_str\" : \"id_str\",\n  \"name\" : \"name\",\n  \"id\" : 1,\n  \"map\" : {\n    \"summary_polyline\" : \"summary_polyline\",\n    \"id\" : \"id\",\n    \"polyline\" : \"polyline\"\n  },\n  \"timestamp\" : 5\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Route>>(exampleJson)
                        : default(List<Route>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
